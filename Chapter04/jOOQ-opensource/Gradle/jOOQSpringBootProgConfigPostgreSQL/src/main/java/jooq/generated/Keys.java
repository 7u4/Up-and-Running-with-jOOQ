/*
 * This file is generated by jOOQ.
 */
package jooq.generated;


import javax.annotation.processing.Generated;

import jooq.generated.tables.Customer;
import jooq.generated.tables.Customerdetail;
import jooq.generated.tables.Department;
import jooq.generated.tables.Employee;
import jooq.generated.tables.Manager;
import jooq.generated.tables.Office;
import jooq.generated.tables.OfficeHasManager;
import jooq.generated.tables.Order;
import jooq.generated.tables.Orderdetail;
import jooq.generated.tables.Payment;
import jooq.generated.tables.Product;
import jooq.generated.tables.Productline;
import jooq.generated.tables.Productlinedetail;
import jooq.generated.tables.Sale;
import jooq.generated.tables.records.CustomerRecord;
import jooq.generated.tables.records.CustomerdetailRecord;
import jooq.generated.tables.records.DepartmentRecord;
import jooq.generated.tables.records.EmployeeRecord;
import jooq.generated.tables.records.ManagerRecord;
import jooq.generated.tables.records.OfficeHasManagerRecord;
import jooq.generated.tables.records.OfficeRecord;
import jooq.generated.tables.records.OrderRecord;
import jooq.generated.tables.records.OrderdetailRecord;
import jooq.generated.tables.records.PaymentRecord;
import jooq.generated.tables.records.ProductRecord;
import jooq.generated.tables.records.ProductlineRecord;
import jooq.generated.tables.records.ProductlinedetailRecord;
import jooq.generated.tables.records.SaleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CustomerRecord> CUSTOMER_PKEY = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final UniqueKey<CustomerdetailRecord> CUSTOMERDETAIL_PKEY = Internal.createUniqueKey(Customerdetail.CUSTOMERDETAIL, DSL.name("customerdetail_pkey"), new TableField[] { Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER }, true);
    public static final UniqueKey<DepartmentRecord> DEPARTMENT_PKEY = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("department_pkey"), new TableField[] { Department.DEPARTMENT.DEPARTMENT_ID }, true);
    public static final UniqueKey<EmployeeRecord> EMPLOYEE_PKEY = Internal.createUniqueKey(Employee.EMPLOYEE, DSL.name("employee_pkey"), new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final UniqueKey<ManagerRecord> MANAGER_PKEY = Internal.createUniqueKey(Manager.MANAGER, DSL.name("manager_pkey"), new TableField[] { Manager.MANAGER.MANAGER_ID }, true);
    public static final UniqueKey<OfficeRecord> OFFICE_PKEY = Internal.createUniqueKey(Office.OFFICE, DSL.name("office_pkey"), new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final UniqueKey<OfficeHasManagerRecord> OFFICES_MANAGERS_PKEY = Internal.createUniqueKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("offices_managers_pkey"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE, OfficeHasManager.OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID }, true);
    public static final UniqueKey<OrderRecord> ORDER_PKEY = Internal.createUniqueKey(Order.ORDER, DSL.name("order_pkey"), new TableField[] { Order.ORDER.ORDER_ID }, true);
    public static final UniqueKey<OrderdetailRecord> ORDERDETAIL_PKEY = Internal.createUniqueKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetail_pkey"), new TableField[] { Orderdetail.ORDERDETAIL.ORDER_ID, Orderdetail.ORDERDETAIL.PRODUCT_ID }, true);
    public static final UniqueKey<PaymentRecord> PAYMENT_PKEY = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("payment_pkey"), new TableField[] { Payment.PAYMENT.CUSTOMER_NUMBER, Payment.PAYMENT.CHECK_NUMBER }, true);
    public static final UniqueKey<PaymentRecord> UNIQUE_CHECK_NUMBER = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("unique_check_number"), new TableField[] { Payment.PAYMENT.CHECK_NUMBER }, true);
    public static final UniqueKey<ProductRecord> PRODUCT_PKEY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pkey"), new TableField[] { Product.PRODUCT.PRODUCT_ID }, true);
    public static final UniqueKey<ProductlineRecord> PRODUCTLINE_PKEY = Internal.createUniqueKey(Productline.PRODUCTLINE, DSL.name("productline_pkey"), new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE, Productline.PRODUCTLINE.CODE }, true);
    public static final UniqueKey<ProductlineRecord> UNIQUE_PRODUCT_LINE = Internal.createUniqueKey(Productline.PRODUCTLINE, DSL.name("unique_product_line"), new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE }, true);
    public static final UniqueKey<ProductlinedetailRecord> PRODUCTLINEDETAIL_PKEY = Internal.createUniqueKey(Productlinedetail.PRODUCTLINEDETAIL, DSL.name("productlinedetail_pkey"), new TableField[] { Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE, Productlinedetail.PRODUCTLINEDETAIL.CODE }, true);
    public static final UniqueKey<ProductlinedetailRecord> UNIQUE_PRODUCT_LINE_DETAIL = Internal.createUniqueKey(Productlinedetail.PRODUCTLINEDETAIL, DSL.name("unique_product_line_detail"), new TableField[] { Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE }, true);
    public static final UniqueKey<SaleRecord> SALE_PKEY = Internal.createUniqueKey(Sale.SALE, DSL.name("sale_pkey"), new TableField[] { Sale.SALE.SALE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CustomerRecord, EmployeeRecord> CUSTOMER__CUSTOMERS_IBFK_1 = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customers_ibfk_1"), new TableField[] { Customer.CUSTOMER.SALES_REP_EMPLOYEE_NUMBER }, Keys.EMPLOYEE_PKEY, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<CustomerdetailRecord, CustomerRecord> CUSTOMERDETAIL__CUSTOMERS_DETAILS_IBFK_1 = Internal.createForeignKey(Customerdetail.CUSTOMERDETAIL, DSL.name("customers_details_ibfk_1"), new TableField[] { Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER }, Keys.CUSTOMER_PKEY, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<DepartmentRecord, OfficeRecord> DEPARTMENT__DEPARTMENT_IBFK_1 = Internal.createForeignKey(Department.DEPARTMENT, DSL.name("department_ibfk_1"), new TableField[] { Department.DEPARTMENT.OFFICE_CODE }, Keys.OFFICE_PKEY, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<EmployeeRecord, EmployeeRecord> EMPLOYEE__EMPLOYEES_IBFK_1 = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("employees_ibfk_1"), new TableField[] { Employee.EMPLOYEE.REPORTS_TO }, Keys.EMPLOYEE_PKEY, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<EmployeeRecord, OfficeRecord> EMPLOYEE__EMPLOYEES_IBFK_2 = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("employees_ibfk_2"), new TableField[] { Employee.EMPLOYEE.OFFICE_CODE }, Keys.OFFICE_PKEY, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<OfficeHasManagerRecord, ManagerRecord> OFFICE_HAS_MANAGER__OFFICE_HAS_MANAGER_MANAGERS_MANAGER_ID_FKEY = Internal.createForeignKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("office_has_manager_managers_manager_id_fkey"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID }, Keys.MANAGER_PKEY, new TableField[] { Manager.MANAGER.MANAGER_ID }, true);
    public static final ForeignKey<OfficeHasManagerRecord, OfficeRecord> OFFICE_HAS_MANAGER__OFFICE_HAS_MANAGER_OFFICES_OFFICE_CODE_FKEY = Internal.createForeignKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("office_has_manager_offices_office_code_fkey"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE }, Keys.OFFICE_PKEY, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<OrderRecord, CustomerRecord> ORDER__ORDERS_IBFK_1 = Internal.createForeignKey(Order.ORDER, DSL.name("orders_ibfk_1"), new TableField[] { Order.ORDER.CUSTOMER_NUMBER }, Keys.CUSTOMER_PKEY, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<OrderdetailRecord, OrderRecord> ORDERDETAIL__ORDERDETAILS_IBFK_1 = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetails_ibfk_1"), new TableField[] { Orderdetail.ORDERDETAIL.ORDER_ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ORDER_ID }, true);
    public static final ForeignKey<OrderdetailRecord, ProductRecord> ORDERDETAIL__ORDERDETAILS_IBFK_2 = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetails_ibfk_2"), new TableField[] { Orderdetail.ORDERDETAIL.PRODUCT_ID }, Keys.PRODUCT_PKEY, new TableField[] { Product.PRODUCT.PRODUCT_ID }, true);
    public static final ForeignKey<PaymentRecord, CustomerRecord> PAYMENT__PAYMENTS_IBFK_1 = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payments_ibfk_1"), new TableField[] { Payment.PAYMENT.CUSTOMER_NUMBER }, Keys.CUSTOMER_PKEY, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<ProductRecord, ProductlineRecord> PRODUCT__PRODUCTS_IBFK_1 = Internal.createForeignKey(Product.PRODUCT, DSL.name("products_ibfk_1"), new TableField[] { Product.PRODUCT.PRODUCT_LINE }, Keys.UNIQUE_PRODUCT_LINE, new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE }, true);
    public static final ForeignKey<ProductlinedetailRecord, ProductlineRecord> PRODUCTLINEDETAIL__PRODUCTLINEDETAIL_IBFK_1 = Internal.createForeignKey(Productlinedetail.PRODUCTLINEDETAIL, DSL.name("productlinedetail_ibfk_1"), new TableField[] { Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE, Productlinedetail.PRODUCTLINEDETAIL.CODE }, Keys.PRODUCTLINE_PKEY, new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE, Productline.PRODUCTLINE.CODE }, true);
    public static final ForeignKey<ProductlinedetailRecord, ProductlineRecord> PRODUCTLINEDETAIL__PRODUCTLINEDETAIL_IBFK_2 = Internal.createForeignKey(Productlinedetail.PRODUCTLINEDETAIL, DSL.name("productlinedetail_ibfk_2"), new TableField[] { Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE }, Keys.UNIQUE_PRODUCT_LINE, new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE }, true);
    public static final ForeignKey<SaleRecord, EmployeeRecord> SALE__SALES_IBFK_1 = Internal.createForeignKey(Sale.SALE, DSL.name("sales_ibfk_1"), new TableField[] { Sale.SALE.EMPLOYEE_NUMBER }, Keys.EMPLOYEE_PKEY, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
}
