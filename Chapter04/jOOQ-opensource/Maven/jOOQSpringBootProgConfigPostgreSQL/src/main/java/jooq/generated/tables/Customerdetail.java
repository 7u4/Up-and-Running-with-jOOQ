/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.CustomerdetailRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4",
        "schema version:1.1"
    },
    date = "2020-10-19T13:52:35.609Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customerdetail extends TableImpl<CustomerdetailRecord> {

    private static final long serialVersionUID = -1134417229;

    /**
     * The reference instance of <code>public.customerdetail</code>
     */
    public static final Customerdetail CUSTOMERDETAIL = new Customerdetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerdetailRecord> getRecordType() {
        return CustomerdetailRecord.class;
    }

    /**
     * The column <code>public.customerdetail.customer_number</code>.
     */
    public final TableField<CustomerdetailRecord, Long> CUSTOMER_NUMBER = createField(DSL.name("customer_number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.customerdetail.address_line_first</code>.
     */
    public final TableField<CustomerdetailRecord, String> ADDRESS_LINE_FIRST = createField(DSL.name("address_line_first"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.customerdetail.address_line_second</code>.
     */
    public final TableField<CustomerdetailRecord, String> ADDRESS_LINE_SECOND = createField(DSL.name("address_line_second"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.customerdetail.city</code>.
     */
    public final TableField<CustomerdetailRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.customerdetail.state</code>.
     */
    public final TableField<CustomerdetailRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.customerdetail.postal_code</code>.
     */
    public final TableField<CustomerdetailRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), org.jooq.impl.SQLDataType.VARCHAR(15).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.customerdetail.country</code>.
     */
    public final TableField<CustomerdetailRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>public.customerdetail</code> table reference
     */
    public Customerdetail() {
        this(DSL.name("customerdetail"), null);
    }

    /**
     * Create an aliased <code>public.customerdetail</code> table reference
     */
    public Customerdetail(String alias) {
        this(DSL.name(alias), CUSTOMERDETAIL);
    }

    /**
     * Create an aliased <code>public.customerdetail</code> table reference
     */
    public Customerdetail(Name alias) {
        this(alias, CUSTOMERDETAIL);
    }

    private Customerdetail(Name alias, Table<CustomerdetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customerdetail(Name alias, Table<CustomerdetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Customerdetail(Table<O> child, ForeignKey<O, CustomerdetailRecord> key) {
        super(child, key, CUSTOMERDETAIL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CustomerdetailRecord> getPrimaryKey() {
        return Keys.CUSTOMERDETAIL_PKEY;
    }

    @Override
    public List<UniqueKey<CustomerdetailRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerdetailRecord>>asList(Keys.CUSTOMERDETAIL_PKEY);
    }

    @Override
    public List<ForeignKey<CustomerdetailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomerdetailRecord, ?>>asList(Keys.CUSTOMERDETAIL__CUSTOMERS_DETAILS_IBFK_1);
    }

    public Customer customer() {
        return new Customer(this, Keys.CUSTOMERDETAIL__CUSTOMERS_DETAILS_IBFK_1);
    }

    @Override
    public Customerdetail as(String alias) {
        return new Customerdetail(DSL.name(alias), this);
    }

    @Override
    public Customerdetail as(Name alias) {
        return new Customerdetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerdetail rename(String name) {
        return new Customerdetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerdetail rename(Name name) {
        return new Customerdetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
