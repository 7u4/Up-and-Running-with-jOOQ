/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.daos;


import java.math.BigDecimal;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.tables.Products;
import jooq.generated.master.dbo.tables.pojos.JooqProducts;
import jooq.generated.master.dbo.tables.records.ProductsRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ProductsRepository extends DAOImpl<ProductsRecord, JooqProducts, Integer> {

    /**
     * Create a new ProductsRepository without any configuration
     */
    public ProductsRepository() {
        super(Products.PRODUCTS, JooqProducts.class);
    }

    /**
     * Create a new ProductsRepository with an attached configuration
     */
    @Autowired
    public ProductsRepository(Configuration configuration) {
        super(Products.PRODUCTS, JooqProducts.class, configuration);
    }

    @Override
    public Integer getId(JooqProducts object) {
        return object.getProductid();
    }

    /**
     * Fetch records that have <code>productId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfProductid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Products.PRODUCTS.PRODUCTID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productId IN (values)</code>
     */
    public List<JooqProducts> fetchByProductid(Integer... values) {
        return fetch(Products.PRODUCTS.PRODUCTID, values);
    }

    /**
     * Fetch a unique record that has <code>productId = value</code>
     */
    public JooqProducts fetchOneByProductid(Integer value) {
        return fetchOne(Products.PRODUCTS.PRODUCTID, value);
    }

    /**
     * Fetch records that have <code>productName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfProductname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Products.PRODUCTS.PRODUCTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productName IN (values)</code>
     */
    public List<JooqProducts> fetchByProductname(String... values) {
        return fetch(Products.PRODUCTS.PRODUCTNAME, values);
    }

    /**
     * Fetch records that have <code>productLine BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfProductline(String lowerInclusive, String upperInclusive) {
        return fetchRange(Products.PRODUCTS.PRODUCTLINE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productLine IN (values)</code>
     */
    public List<JooqProducts> fetchByProductline(String... values) {
        return fetch(Products.PRODUCTS.PRODUCTLINE, values);
    }

    /**
     * Fetch records that have <code>productScale BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfProductscale(String lowerInclusive, String upperInclusive) {
        return fetchRange(Products.PRODUCTS.PRODUCTSCALE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productScale IN (values)</code>
     */
    public List<JooqProducts> fetchByProductscale(String... values) {
        return fetch(Products.PRODUCTS.PRODUCTSCALE, values);
    }

    /**
     * Fetch records that have <code>productVendor BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfProductvendor(String lowerInclusive, String upperInclusive) {
        return fetchRange(Products.PRODUCTS.PRODUCTVENDOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productVendor IN (values)</code>
     */
    public List<JooqProducts> fetchByProductvendor(String... values) {
        return fetch(Products.PRODUCTS.PRODUCTVENDOR, values);
    }

    /**
     * Fetch records that have <code>productDescription BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfProductdescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Products.PRODUCTS.PRODUCTDESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productDescription IN (values)</code>
     */
    public List<JooqProducts> fetchByProductdescription(String... values) {
        return fetch(Products.PRODUCTS.PRODUCTDESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>quantityInStock BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfQuantityinstock(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(Products.PRODUCTS.QUANTITYINSTOCK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>quantityInStock IN (values)</code>
     */
    public List<JooqProducts> fetchByQuantityinstock(Short... values) {
        return fetch(Products.PRODUCTS.QUANTITYINSTOCK, values);
    }

    /**
     * Fetch records that have <code>buyPrice BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfBuyprice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Products.PRODUCTS.BUYPRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>buyPrice IN (values)</code>
     */
    public List<JooqProducts> fetchByBuyprice(BigDecimal... values) {
        return fetch(Products.PRODUCTS.BUYPRICE, values);
    }

    /**
     * Fetch records that have <code>MSRP BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProducts> fetchRangeOfMsrp(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Products.PRODUCTS.MSRP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>MSRP IN (values)</code>
     */
    public List<JooqProducts> fetchByMsrp(BigDecimal... values) {
        return fetch(Products.PRODUCTS.MSRP, values);
    }
}
