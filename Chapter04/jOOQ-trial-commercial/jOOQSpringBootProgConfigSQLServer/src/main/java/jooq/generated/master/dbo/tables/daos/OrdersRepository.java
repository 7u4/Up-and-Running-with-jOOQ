/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.daos;


import java.time.LocalDate;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.tables.Orders;
import jooq.generated.master.dbo.tables.pojos.JooqOrders;
import jooq.generated.master.dbo.tables.records.OrdersRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class OrdersRepository extends DAOImpl<OrdersRecord, JooqOrders, Integer> {

    /**
     * Create a new OrdersRepository without any configuration
     */
    public OrdersRepository() {
        super(Orders.ORDERS, JooqOrders.class);
    }

    /**
     * Create a new OrdersRepository with an attached configuration
     */
    @Autowired
    public OrdersRepository(Configuration configuration) {
        super(Orders.ORDERS, JooqOrders.class, configuration);
    }

    @Override
    public Integer getId(JooqOrders object) {
        return object.getOrderid();
    }

    /**
     * Fetch records that have <code>orderId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOrders> fetchRangeOfOrderid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Orders.ORDERS.ORDERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>orderId IN (values)</code>
     */
    public List<JooqOrders> fetchByOrderid(Integer... values) {
        return fetch(Orders.ORDERS.ORDERID, values);
    }

    /**
     * Fetch a unique record that has <code>orderId = value</code>
     */
    public JooqOrders fetchOneByOrderid(Integer value) {
        return fetchOne(Orders.ORDERS.ORDERID, value);
    }

    /**
     * Fetch records that have <code>orderDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOrders> fetchRangeOfOrderdate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Orders.ORDERS.ORDERDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>orderDate IN (values)</code>
     */
    public List<JooqOrders> fetchByOrderdate(LocalDate... values) {
        return fetch(Orders.ORDERS.ORDERDATE, values);
    }

    /**
     * Fetch records that have <code>requiredDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOrders> fetchRangeOfRequireddate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Orders.ORDERS.REQUIREDDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>requiredDate IN (values)</code>
     */
    public List<JooqOrders> fetchByRequireddate(LocalDate... values) {
        return fetch(Orders.ORDERS.REQUIREDDATE, values);
    }

    /**
     * Fetch records that have <code>shippedDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOrders> fetchRangeOfShippeddate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Orders.ORDERS.SHIPPEDDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shippedDate IN (values)</code>
     */
    public List<JooqOrders> fetchByShippeddate(LocalDate... values) {
        return fetch(Orders.ORDERS.SHIPPEDDATE, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOrders> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Orders.ORDERS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<JooqOrders> fetchByStatus(String... values) {
        return fetch(Orders.ORDERS.STATUS, values);
    }

    /**
     * Fetch records that have <code>comments BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOrders> fetchRangeOfComments(String lowerInclusive, String upperInclusive) {
        return fetchRange(Orders.ORDERS.COMMENTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comments IN (values)</code>
     */
    public List<JooqOrders> fetchByComments(String... values) {
        return fetch(Orders.ORDERS.COMMENTS, values);
    }

    /**
     * Fetch records that have <code>customerNumber BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOrders> fetchRangeOfCustomernumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Orders.ORDERS.CUSTOMERNUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customerNumber IN (values)</code>
     */
    public List<JooqOrders> fetchByCustomernumber(Integer... values) {
        return fetch(Orders.ORDERS.CUSTOMERNUMBER, values);
    }
}
