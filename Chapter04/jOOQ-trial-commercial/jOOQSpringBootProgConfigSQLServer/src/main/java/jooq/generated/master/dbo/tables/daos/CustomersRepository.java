/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.daos;


import java.math.BigDecimal;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.tables.Customers;
import jooq.generated.master.dbo.tables.pojos.JooqCustomers;
import jooq.generated.master.dbo.tables.records.CustomersRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CustomersRepository extends DAOImpl<CustomersRecord, JooqCustomers, Integer> {

    /**
     * Create a new CustomersRepository without any configuration
     */
    public CustomersRepository() {
        super(Customers.CUSTOMERS, JooqCustomers.class);
    }

    /**
     * Create a new CustomersRepository with an attached configuration
     */
    @Autowired
    public CustomersRepository(Configuration configuration) {
        super(Customers.CUSTOMERS, JooqCustomers.class, configuration);
    }

    @Override
    public Integer getId(JooqCustomers object) {
        return object.getCustomernumber();
    }

    /**
     * Fetch records that have <code>customerNumber BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfCustomernumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.CUSTOMERNUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customerNumber IN (values)</code>
     */
    public List<JooqCustomers> fetchByCustomernumber(Integer... values) {
        return fetch(Customers.CUSTOMERS.CUSTOMERNUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>customerNumber = value</code>
     */
    public JooqCustomers fetchOneByCustomernumber(Integer value) {
        return fetchOne(Customers.CUSTOMERS.CUSTOMERNUMBER, value);
    }

    /**
     * Fetch records that have <code>customerName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfCustomername(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.CUSTOMERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customerName IN (values)</code>
     */
    public List<JooqCustomers> fetchByCustomername(String... values) {
        return fetch(Customers.CUSTOMERS.CUSTOMERNAME, values);
    }

    /**
     * Fetch records that have <code>contactLastName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfContactlastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.CONTACTLASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>contactLastName IN (values)</code>
     */
    public List<JooqCustomers> fetchByContactlastname(String... values) {
        return fetch(Customers.CUSTOMERS.CONTACTLASTNAME, values);
    }

    /**
     * Fetch records that have <code>contactFirstName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfContactfirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.CONTACTFIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>contactFirstName IN (values)</code>
     */
    public List<JooqCustomers> fetchByContactfirstname(String... values) {
        return fetch(Customers.CUSTOMERS.CONTACTFIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    public List<JooqCustomers> fetchByPhone(String... values) {
        return fetch(Customers.CUSTOMERS.PHONE, values);
    }

    /**
     * Fetch records that have <code>addressLine1 BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfAddressline1(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.ADDRESSLINE1, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>addressLine1 IN (values)</code>
     */
    public List<JooqCustomers> fetchByAddressline1(String... values) {
        return fetch(Customers.CUSTOMERS.ADDRESSLINE1, values);
    }

    /**
     * Fetch records that have <code>addressLine2 BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfAddressline2(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.ADDRESSLINE2, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>addressLine2 IN (values)</code>
     */
    public List<JooqCustomers> fetchByAddressline2(String... values) {
        return fetch(Customers.CUSTOMERS.ADDRESSLINE2, values);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<JooqCustomers> fetchByCity(String... values) {
        return fetch(Customers.CUSTOMERS.CITY, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<JooqCustomers> fetchByState(String... values) {
        return fetch(Customers.CUSTOMERS.STATE, values);
    }

    /**
     * Fetch records that have <code>postalCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfPostalcode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.POSTALCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>postalCode IN (values)</code>
     */
    public List<JooqCustomers> fetchByPostalcode(String... values) {
        return fetch(Customers.CUSTOMERS.POSTALCODE, values);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<JooqCustomers> fetchByCountry(String... values) {
        return fetch(Customers.CUSTOMERS.COUNTRY, values);
    }

    /**
     * Fetch records that have <code>salesRepEmployeeNumber BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfSalesrepemployeenumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.SALESREPEMPLOYEENUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salesRepEmployeeNumber IN (values)</code>
     */
    public List<JooqCustomers> fetchBySalesrepemployeenumber(Integer... values) {
        return fetch(Customers.CUSTOMERS.SALESREPEMPLOYEENUMBER, values);
    }

    /**
     * Fetch records that have <code>creditLimit BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqCustomers> fetchRangeOfCreditlimit(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Customers.CUSTOMERS.CREDITLIMIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creditLimit IN (values)</code>
     */
    public List<JooqCustomers> fetchByCreditlimit(BigDecimal... values) {
        return fetch(Customers.CUSTOMERS.CREDITLIMIT, values);
    }
}
