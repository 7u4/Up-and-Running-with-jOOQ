/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.Dbo;
import jooq.generated.master.dbo.Indexes;
import jooq.generated.master.dbo.Keys;
import jooq.generated.master.dbo.tables.records.CustomersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = -680215856;

    /**
     * The reference instance of <code>master.dbo.customers</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>master.dbo.customers.customerNumber</code>.
     */
    public final TableField<CustomersRecord, Integer> CUSTOMERNUMBER = createField(DSL.name("customerNumber"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.customerName</code>.
     */
    public final TableField<CustomersRecord, String> CUSTOMERNAME = createField(DSL.name("customerName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.contactLastName</code>.
     */
    public final TableField<CustomersRecord, String> CONTACTLASTNAME = createField(DSL.name("contactLastName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.contactFirstName</code>.
     */
    public final TableField<CustomersRecord, String> CONTACTFIRSTNAME = createField(DSL.name("contactFirstName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.phone</code>.
     */
    public final TableField<CustomersRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.addressLine1</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESSLINE1 = createField(DSL.name("addressLine1"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.addressLine2</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESSLINE2 = createField(DSL.name("addressLine2"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("(NULL)", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>master.dbo.customers.city</code>.
     */
    public final TableField<CustomersRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.state</code>.
     */
    public final TableField<CustomersRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("(NULL)", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>master.dbo.customers.postalCode</code>.
     */
    public final TableField<CustomersRecord, String> POSTALCODE = createField(DSL.name("postalCode"), org.jooq.impl.SQLDataType.VARCHAR(15).defaultValue(org.jooq.impl.DSL.field("(NULL)", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>master.dbo.customers.country</code>.
     */
    public final TableField<CustomersRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.customers.salesRepEmployeeNumber</code>.
     */
    public final TableField<CustomersRecord, Integer> SALESREPEMPLOYEENUMBER = createField(DSL.name("salesRepEmployeeNumber"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("(NULL)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>master.dbo.customers.creditLimit</code>.
     */
    public final TableField<CustomersRecord, BigDecimal> CREDITLIMIT = createField(DSL.name("creditLimit"), org.jooq.impl.SQLDataType.NUMERIC(10, 2).defaultValue(org.jooq.impl.DSL.field("(NULL)", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * Create a <code>master.dbo.customers</code> table reference
     */
    public Customers() {
        this(DSL.name("customers"), null);
    }

    /**
     * Create an aliased <code>master.dbo.customers</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>master.dbo.customers</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Customers(Table<O> child, ForeignKey<O, CustomersRecord> key) {
        super(child, key, CUSTOMERS);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMERS_SALESREPEMPLOYEENUMBER);
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.CUSTOMERS__PK__CUSTOMER__6B636996A2EFD998;
    }

    @Override
    public List<UniqueKey<CustomersRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomersRecord>>asList(Keys.CUSTOMERS__PK__CUSTOMER__6B636996A2EFD998);
    }

    @Override
    public List<ForeignKey<CustomersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomersRecord, ?>>asList(Keys.CUSTOMERS_IBFK_1);
    }

    public Employees employees() {
        return new Employees(this, Keys.CUSTOMERS_IBFK_1);
    }

    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, String, String, String, String, String, String, String, String, Integer, BigDecimal> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
