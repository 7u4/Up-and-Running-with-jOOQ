/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.daos;


import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.tables.Offices;
import jooq.generated.master.dbo.tables.pojos.JooqOffices;
import jooq.generated.master.dbo.tables.records.OfficesRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class OfficesRepository extends DAOImpl<OfficesRecord, JooqOffices, String> {

    /**
     * Create a new OfficesRepository without any configuration
     */
    public OfficesRepository() {
        super(Offices.OFFICES, JooqOffices.class);
    }

    /**
     * Create a new OfficesRepository with an attached configuration
     */
    @Autowired
    public OfficesRepository(Configuration configuration) {
        super(Offices.OFFICES, JooqOffices.class, configuration);
    }

    @Override
    public String getId(JooqOffices object) {
        return object.getOfficecode();
    }

    /**
     * Fetch records that have <code>officeCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfOfficecode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.OFFICECODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>officeCode IN (values)</code>
     */
    public List<JooqOffices> fetchByOfficecode(String... values) {
        return fetch(Offices.OFFICES.OFFICECODE, values);
    }

    /**
     * Fetch a unique record that has <code>officeCode = value</code>
     */
    public JooqOffices fetchOneByOfficecode(String value) {
        return fetchOne(Offices.OFFICES.OFFICECODE, value);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<JooqOffices> fetchByCity(String... values) {
        return fetch(Offices.OFFICES.CITY, values);
    }

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    public List<JooqOffices> fetchByPhone(String... values) {
        return fetch(Offices.OFFICES.PHONE, values);
    }

    /**
     * Fetch records that have <code>addressLine1 BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfAddressline1(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.ADDRESSLINE1, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>addressLine1 IN (values)</code>
     */
    public List<JooqOffices> fetchByAddressline1(String... values) {
        return fetch(Offices.OFFICES.ADDRESSLINE1, values);
    }

    /**
     * Fetch records that have <code>addressLine2 BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfAddressline2(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.ADDRESSLINE2, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>addressLine2 IN (values)</code>
     */
    public List<JooqOffices> fetchByAddressline2(String... values) {
        return fetch(Offices.OFFICES.ADDRESSLINE2, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<JooqOffices> fetchByState(String... values) {
        return fetch(Offices.OFFICES.STATE, values);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<JooqOffices> fetchByCountry(String... values) {
        return fetch(Offices.OFFICES.COUNTRY, values);
    }

    /**
     * Fetch records that have <code>postalCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfPostalcode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.POSTALCODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>postalCode IN (values)</code>
     */
    public List<JooqOffices> fetchByPostalcode(String... values) {
        return fetch(Offices.OFFICES.POSTALCODE, values);
    }

    /**
     * Fetch records that have <code>territory BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqOffices> fetchRangeOfTerritory(String lowerInclusive, String upperInclusive) {
        return fetchRange(Offices.OFFICES.TERRITORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>territory IN (values)</code>
     */
    public List<JooqOffices> fetchByTerritory(String... values) {
        return fetch(Offices.OFFICES.TERRITORY, values);
    }
}
