/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.Dbo;
import jooq.generated.master.dbo.Keys;
import jooq.generated.master.dbo.tables.records.ManagersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Managers extends TableImpl<ManagersRecord> {

    private static final long serialVersionUID = 1003054189;

    /**
     * The reference instance of <code>master.dbo.managers</code>
     */
    public static final Managers MANAGERS = new Managers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManagersRecord> getRecordType() {
        return ManagersRecord.class;
    }

    /**
     * The column <code>master.dbo.managers.managerId</code>.
     */
    public final TableField<ManagersRecord, Integer> MANAGERID = createField(DSL.name("managerId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>master.dbo.managers.name</code>.
     */
    public final TableField<ManagersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>master.dbo.managers</code> table reference
     */
    public Managers() {
        this(DSL.name("managers"), null);
    }

    /**
     * Create an aliased <code>master.dbo.managers</code> table reference
     */
    public Managers(String alias) {
        this(DSL.name(alias), MANAGERS);
    }

    /**
     * Create an aliased <code>master.dbo.managers</code> table reference
     */
    public Managers(Name alias) {
        this(alias, MANAGERS);
    }

    private Managers(Name alias, Table<ManagersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Managers(Name alias, Table<ManagersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Managers(Table<O> child, ForeignKey<O, ManagersRecord> key) {
        super(child, key, MANAGERS);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public Identity<ManagersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MANAGERS;
    }

    @Override
    public UniqueKey<ManagersRecord> getPrimaryKey() {
        return Keys.MANAGERS__PK__MANAGERS__47E0141FB6853BA2;
    }

    @Override
    public List<UniqueKey<ManagersRecord>> getKeys() {
        return Arrays.<UniqueKey<ManagersRecord>>asList(Keys.MANAGERS__PK__MANAGERS__47E0141FB6853BA2);
    }

    @Override
    public Managers as(String alias) {
        return new Managers(DSL.name(alias), this);
    }

    @Override
    public Managers as(Name alias) {
        return new Managers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Managers rename(String name) {
        return new Managers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Managers rename(Name name) {
        return new Managers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
