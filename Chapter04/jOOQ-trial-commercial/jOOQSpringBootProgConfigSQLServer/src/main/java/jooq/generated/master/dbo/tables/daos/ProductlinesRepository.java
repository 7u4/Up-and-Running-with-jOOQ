/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.daos;


import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.tables.Productlines;
import jooq.generated.master.dbo.tables.pojos.JooqProductlines;
import jooq.generated.master.dbo.tables.records.ProductlinesRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ProductlinesRepository extends DAOImpl<ProductlinesRecord, JooqProductlines, String> {

    /**
     * Create a new ProductlinesRepository without any configuration
     */
    public ProductlinesRepository() {
        super(Productlines.PRODUCTLINES, JooqProductlines.class);
    }

    /**
     * Create a new ProductlinesRepository with an attached configuration
     */
    @Autowired
    public ProductlinesRepository(Configuration configuration) {
        super(Productlines.PRODUCTLINES, JooqProductlines.class, configuration);
    }

    @Override
    public String getId(JooqProductlines object) {
        return object.getProductline();
    }

    /**
     * Fetch records that have <code>productLine BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlines> fetchRangeOfProductline(String lowerInclusive, String upperInclusive) {
        return fetchRange(Productlines.PRODUCTLINES.PRODUCTLINE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productLine IN (values)</code>
     */
    public List<JooqProductlines> fetchByProductline(String... values) {
        return fetch(Productlines.PRODUCTLINES.PRODUCTLINE, values);
    }

    /**
     * Fetch a unique record that has <code>productLine = value</code>
     */
    public JooqProductlines fetchOneByProductline(String value) {
        return fetchOne(Productlines.PRODUCTLINES.PRODUCTLINE, value);
    }

    /**
     * Fetch records that have <code>textDescription BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlines> fetchRangeOfTextdescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Productlines.PRODUCTLINES.TEXTDESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>textDescription IN (values)</code>
     */
    public List<JooqProductlines> fetchByTextdescription(String... values) {
        return fetch(Productlines.PRODUCTLINES.TEXTDESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>htmlDescription BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlines> fetchRangeOfHtmldescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Productlines.PRODUCTLINES.HTMLDESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>htmlDescription IN (values)</code>
     */
    public List<JooqProductlines> fetchByHtmldescription(String... values) {
        return fetch(Productlines.PRODUCTLINES.HTMLDESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>image BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlines> fetchRangeOfImage(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Productlines.PRODUCTLINES.IMAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>image IN (values)</code>
     */
    public List<JooqProductlines> fetchByImage(byte[]... values) {
        return fetch(Productlines.PRODUCTLINES.IMAGE, values);
    }
}
