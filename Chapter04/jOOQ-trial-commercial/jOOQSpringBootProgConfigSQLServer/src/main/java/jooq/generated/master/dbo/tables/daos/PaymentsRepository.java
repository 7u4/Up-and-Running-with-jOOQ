/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.tables.Payments;
import jooq.generated.master.dbo.tables.pojos.JooqPayments;
import jooq.generated.master.dbo.tables.records.PaymentsRecord;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class PaymentsRepository extends DAOImpl<PaymentsRecord, JooqPayments, Record2<Integer, String>> {

    /**
     * Create a new PaymentsRepository without any configuration
     */
    public PaymentsRepository() {
        super(Payments.PAYMENTS, JooqPayments.class);
    }

    /**
     * Create a new PaymentsRepository with an attached configuration
     */
    @Autowired
    public PaymentsRepository(Configuration configuration) {
        super(Payments.PAYMENTS, JooqPayments.class, configuration);
    }

    @Override
    public Record2<Integer, String> getId(JooqPayments object) {
        return compositeKeyRecord(object.getCustomernumber(), object.getChecknumber());
    }

    /**
     * Fetch records that have <code>customerNumber BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayments> fetchRangeOfCustomernumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Payments.PAYMENTS.CUSTOMERNUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customerNumber IN (values)</code>
     */
    public List<JooqPayments> fetchByCustomernumber(Integer... values) {
        return fetch(Payments.PAYMENTS.CUSTOMERNUMBER, values);
    }

    /**
     * Fetch records that have <code>checkNumber BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayments> fetchRangeOfChecknumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Payments.PAYMENTS.CHECKNUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>checkNumber IN (values)</code>
     */
    public List<JooqPayments> fetchByChecknumber(String... values) {
        return fetch(Payments.PAYMENTS.CHECKNUMBER, values);
    }

    /**
     * Fetch records that have <code>paymentDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayments> fetchRangeOfPaymentdate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Payments.PAYMENTS.PAYMENTDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>paymentDate IN (values)</code>
     */
    public List<JooqPayments> fetchByPaymentdate(LocalDate... values) {
        return fetch(Payments.PAYMENTS.PAYMENTDATE, values);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayments> fetchRangeOfAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Payments.PAYMENTS.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<JooqPayments> fetchByAmount(BigDecimal... values) {
        return fetch(Payments.PAYMENTS.AMOUNT, values);
    }
}
