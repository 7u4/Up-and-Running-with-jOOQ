/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.records;


import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import jooq.generated.master.dbo.tables.Managers;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ManagersRecord extends UpdatableRecordImpl<ManagersRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1988469778;

    /**
     * Setter for <code>master.dbo.managers.managerId</code>.
     */
    public void setManagerid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>master.dbo.managers.managerId</code>.
     */
    public Integer getManagerid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>master.dbo.managers.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>master.dbo.managers.name</code>.
     */
    @NotNull
    @Size(max = 50)
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Managers.MANAGERS.MANAGERID;
    }

    @Override
    public Field<String> field2() {
        return Managers.MANAGERS.NAME;
    }

    @Override
    public Integer component1() {
        return getManagerid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer value1() {
        return getManagerid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public ManagersRecord value1(Integer value) {
        setManagerid(value);
        return this;
    }

    @Override
    public ManagersRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ManagersRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ManagersRecord
     */
    public ManagersRecord() {
        super(Managers.MANAGERS);
    }

    /**
     * Create a detached, initialised ManagersRecord
     */
    public ManagersRecord(Integer managerid, String name) {
        super(Managers.MANAGERS);

        set(0, managerid);
        set(1, name);
    }
}
