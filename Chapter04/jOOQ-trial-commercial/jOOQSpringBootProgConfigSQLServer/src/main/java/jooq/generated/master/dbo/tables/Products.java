/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.Dbo;
import jooq.generated.master.dbo.Indexes;
import jooq.generated.master.dbo.Keys;
import jooq.generated.master.dbo.tables.records.ProductsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = -1667690775;

    /**
     * The reference instance of <code>master.dbo.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>master.dbo.products.productId</code>.
     */
    public final TableField<ProductsRecord, Integer> PRODUCTID = createField(DSL.name("productId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>master.dbo.products.productName</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTNAME = createField(DSL.name("productName"), org.jooq.impl.SQLDataType.VARCHAR(70).nullable(false), this, "");

    /**
     * The column <code>master.dbo.products.productLine</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTLINE = createField(DSL.name("productLine"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.products.productScale</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTSCALE = createField(DSL.name("productScale"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>master.dbo.products.productVendor</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTVENDOR = createField(DSL.name("productVendor"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.products.productDescription</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTDESCRIPTION = createField(DSL.name("productDescription"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>master.dbo.products.quantityInStock</code>.
     */
    public final TableField<ProductsRecord, Short> QUANTITYINSTOCK = createField(DSL.name("quantityInStock"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>master.dbo.products.buyPrice</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> BUYPRICE = createField(DSL.name("buyPrice"), org.jooq.impl.SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>master.dbo.products.MSRP</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> MSRP = createField(DSL.name("MSRP"), org.jooq.impl.SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * Create a <code>master.dbo.products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    /**
     * Create an aliased <code>master.dbo.products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>master.dbo.products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Products(Table<O> child, ForeignKey<O, ProductsRecord> key) {
        super(child, key, PRODUCTS);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCTS_PRODUCTLINE);
    }

    @Override
    public Identity<ProductsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCTS;
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS__PK__PRODUCTS__2D10D16AF5775414;
    }

    @Override
    public List<UniqueKey<ProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductsRecord>>asList(Keys.PRODUCTS__PK__PRODUCTS__2D10D16AF5775414);
    }

    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductsRecord, ?>>asList(Keys.PRODUCTS_IBFK_1);
    }

    public Productlines productlines() {
        return new Productlines(this, Keys.PRODUCTS_IBFK_1);
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, Short, BigDecimal, BigDecimal> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
