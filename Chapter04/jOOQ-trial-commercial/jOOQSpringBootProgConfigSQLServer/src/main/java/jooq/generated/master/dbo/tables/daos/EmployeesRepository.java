/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables.daos;


import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.tables.Employees;
import jooq.generated.master.dbo.tables.pojos.JooqEmployees;
import jooq.generated.master.dbo.tables.records.EmployeesRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class EmployeesRepository extends DAOImpl<EmployeesRecord, JooqEmployees, Integer> {

    /**
     * Create a new EmployeesRepository without any configuration
     */
    public EmployeesRepository() {
        super(Employees.EMPLOYEES, JooqEmployees.class);
    }

    /**
     * Create a new EmployeesRepository with an attached configuration
     */
    @Autowired
    public EmployeesRepository(Configuration configuration) {
        super(Employees.EMPLOYEES, JooqEmployees.class, configuration);
    }

    @Override
    public Integer getId(JooqEmployees object) {
        return object.getEmployeenumber();
    }

    /**
     * Fetch records that have <code>employeeNumber BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfEmployeenumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.EMPLOYEENUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>employeeNumber IN (values)</code>
     */
    public List<JooqEmployees> fetchByEmployeenumber(Integer... values) {
        return fetch(Employees.EMPLOYEES.EMPLOYEENUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>employeeNumber = value</code>
     */
    public JooqEmployees fetchOneByEmployeenumber(Integer value) {
        return fetchOne(Employees.EMPLOYEES.EMPLOYEENUMBER, value);
    }

    /**
     * Fetch records that have <code>lastName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastName IN (values)</code>
     */
    public List<JooqEmployees> fetchByLastname(String... values) {
        return fetch(Employees.EMPLOYEES.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>firstName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstName IN (values)</code>
     */
    public List<JooqEmployees> fetchByFirstname(String... values) {
        return fetch(Employees.EMPLOYEES.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>extension BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfExtension(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.EXTENSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>extension IN (values)</code>
     */
    public List<JooqEmployees> fetchByExtension(String... values) {
        return fetch(Employees.EMPLOYEES.EXTENSION, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<JooqEmployees> fetchByEmail(String... values) {
        return fetch(Employees.EMPLOYEES.EMAIL, values);
    }

    /**
     * Fetch records that have <code>officeCode BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfOfficecode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.OFFICECODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>officeCode IN (values)</code>
     */
    public List<JooqEmployees> fetchByOfficecode(String... values) {
        return fetch(Employees.EMPLOYEES.OFFICECODE, values);
    }

    /**
     * Fetch records that have <code>reportsTo BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfReportsto(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.REPORTSTO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>reportsTo IN (values)</code>
     */
    public List<JooqEmployees> fetchByReportsto(Integer... values) {
        return fetch(Employees.EMPLOYEES.REPORTSTO, values);
    }

    /**
     * Fetch records that have <code>jobTitle BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqEmployees> fetchRangeOfJobtitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employees.EMPLOYEES.JOBTITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>jobTitle IN (values)</code>
     */
    public List<JooqEmployees> fetchByJobtitle(String... values) {
        return fetch(Employees.EMPLOYEES.JOBTITLE, values);
    }
}
