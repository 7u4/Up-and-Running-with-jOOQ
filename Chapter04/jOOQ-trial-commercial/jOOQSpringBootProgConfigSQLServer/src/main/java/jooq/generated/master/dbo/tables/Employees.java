/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.Dbo;
import jooq.generated.master.dbo.Indexes;
import jooq.generated.master.dbo.Keys;
import jooq.generated.master.dbo.tables.records.EmployeesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 1723560301;

    /**
     * The reference instance of <code>master.dbo.employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>master.dbo.employees.employeeNumber</code>.
     */
    public final TableField<EmployeesRecord, Integer> EMPLOYEENUMBER = createField(DSL.name("employeeNumber"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>master.dbo.employees.lastName</code>.
     */
    public final TableField<EmployeesRecord, String> LASTNAME = createField(DSL.name("lastName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.employees.firstName</code>.
     */
    public final TableField<EmployeesRecord, String> FIRSTNAME = createField(DSL.name("firstName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>master.dbo.employees.extension</code>.
     */
    public final TableField<EmployeesRecord, String> EXTENSION = createField(DSL.name("extension"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>master.dbo.employees.email</code>.
     */
    public final TableField<EmployeesRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>master.dbo.employees.officeCode</code>.
     */
    public final TableField<EmployeesRecord, String> OFFICECODE = createField(DSL.name("officeCode"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>master.dbo.employees.reportsTo</code>.
     */
    public final TableField<EmployeesRecord, Integer> REPORTSTO = createField(DSL.name("reportsTo"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("(NULL)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>master.dbo.employees.jobTitle</code>.
     */
    public final TableField<EmployeesRecord, String> JOBTITLE = createField(DSL.name("jobTitle"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>master.dbo.employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    /**
     * Create an aliased <code>master.dbo.employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>master.dbo.employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEES_OFFICECODE, Indexes.EMPLOYEES_REPORTSTO);
    }

    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.EMPLOYEES__PK__EMPLOYEE__CB72B235C329A864;
    }

    @Override
    public List<UniqueKey<EmployeesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeesRecord>>asList(Keys.EMPLOYEES__PK__EMPLOYEE__CB72B235C329A864);
    }

    @Override
    public List<ForeignKey<EmployeesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeesRecord, ?>>asList(Keys.EMPLOYEES_IBFK_2, Keys.EMPLOYEES_IBFK_1);
    }

    public Offices offices() {
        return new Offices(this, Keys.EMPLOYEES_IBFK_2);
    }

    public Employees employees() {
        return new Employees(this, Keys.EMPLOYEES_IBFK_1);
    }

    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, Integer, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
