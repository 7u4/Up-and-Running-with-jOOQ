/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.Dbo;
import jooq.generated.master.dbo.Indexes;
import jooq.generated.master.dbo.Keys;
import jooq.generated.master.dbo.tables.records.OfficesHasManagersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfficesHasManagers extends TableImpl<OfficesHasManagersRecord> {

    private static final long serialVersionUID = -1368081304;

    /**
     * The reference instance of <code>master.dbo.offices_has_managers</code>
     */
    public static final OfficesHasManagers OFFICES_HAS_MANAGERS = new OfficesHasManagers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficesHasManagersRecord> getRecordType() {
        return OfficesHasManagersRecord.class;
    }

    /**
     * The column <code>master.dbo.offices_has_managers.officeCode</code>.
     */
    public final TableField<OfficesHasManagersRecord, String> OFFICECODE = createField(DSL.name("officeCode"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>master.dbo.offices_has_managers.managerId</code>.
     */
    public final TableField<OfficesHasManagersRecord, Integer> MANAGERID = createField(DSL.name("managerId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>master.dbo.offices_has_managers</code> table reference
     */
    public OfficesHasManagers() {
        this(DSL.name("offices_has_managers"), null);
    }

    /**
     * Create an aliased <code>master.dbo.offices_has_managers</code> table reference
     */
    public OfficesHasManagers(String alias) {
        this(DSL.name(alias), OFFICES_HAS_MANAGERS);
    }

    /**
     * Create an aliased <code>master.dbo.offices_has_managers</code> table reference
     */
    public OfficesHasManagers(Name alias) {
        this(alias, OFFICES_HAS_MANAGERS);
    }

    private OfficesHasManagers(Name alias, Table<OfficesHasManagersRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfficesHasManagers(Name alias, Table<OfficesHasManagersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OfficesHasManagers(Table<O> child, ForeignKey<O, OfficesHasManagersRecord> key) {
        super(child, key, OFFICES_HAS_MANAGERS);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OFFICES_HAS_MANAGERS_IDX_OFFICES_HAS_MANAGERS_ID);
    }

    @Override
    public UniqueKey<OfficesHasManagersRecord> getPrimaryKey() {
        return Keys.OFFICES_HAS_MANAGERS__OFFICES_MANAGERS_PKEY;
    }

    @Override
    public List<UniqueKey<OfficesHasManagersRecord>> getKeys() {
        return Arrays.<UniqueKey<OfficesHasManagersRecord>>asList(Keys.OFFICES_HAS_MANAGERS__OFFICES_MANAGERS_PKEY);
    }

    @Override
    public List<ForeignKey<OfficesHasManagersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OfficesHasManagersRecord, ?>>asList(Keys.FK__OFFICES_H__OFFIC__37C5420D, Keys.FK__OFFICES_H__MANAG__38B96646);
    }

    public Offices offices() {
        return new Offices(this, Keys.FK__OFFICES_H__OFFIC__37C5420D);
    }

    public Managers managers() {
        return new Managers(this, Keys.FK__OFFICES_H__MANAG__38B96646);
    }

    @Override
    public OfficesHasManagers as(String alias) {
        return new OfficesHasManagers(DSL.name(alias), this);
    }

    @Override
    public OfficesHasManagers as(Name alias) {
        return new OfficesHasManagers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfficesHasManagers rename(String name) {
        return new OfficesHasManagers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OfficesHasManagers rename(Name name) {
        return new OfficesHasManagers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
