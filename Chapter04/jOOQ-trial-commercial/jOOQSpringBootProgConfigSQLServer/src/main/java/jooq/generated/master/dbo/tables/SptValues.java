/*
 * This file is generated by jOOQ.
 */
package jooq.generated.master.dbo.tables;


import javax.annotation.processing.Generated;

import jooq.generated.master.dbo.Dbo;
import jooq.generated.master.dbo.tables.records.SptValuesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-31T06:19:36.439Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SptValues extends TableImpl<SptValuesRecord> {

    private static final long serialVersionUID = 1752159092;

    /**
     * The reference instance of <code>master.dbo.spt_values</code>
     */
    public static final SptValues SPT_VALUES = new SptValues();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SptValuesRecord> getRecordType() {
        return SptValuesRecord.class;
    }

    /**
     * The column <code>master.dbo.spt_values.name</code>.
     */
    public final TableField<SptValuesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.NVARCHAR(35), this, "");

    /**
     * The column <code>master.dbo.spt_values.number</code>.
     */
    public final TableField<SptValuesRecord, Integer> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>master.dbo.spt_values.type</code>.
     */
    public final TableField<SptValuesRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.NCHAR(3).nullable(false), this, "");

    /**
     * The column <code>master.dbo.spt_values.low</code>.
     */
    public final TableField<SptValuesRecord, Integer> LOW = createField(DSL.name("low"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>master.dbo.spt_values.high</code>.
     */
    public final TableField<SptValuesRecord, Integer> HIGH = createField(DSL.name("high"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>master.dbo.spt_values.status</code>.
     */
    public final TableField<SptValuesRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>master.dbo.spt_values</code> table reference
     */
    public SptValues() {
        this(DSL.name("spt_values"), null);
    }

    /**
     * Create an aliased <code>master.dbo.spt_values</code> table reference
     */
    public SptValues(String alias) {
        this(DSL.name(alias), SPT_VALUES);
    }

    /**
     * Create an aliased <code>master.dbo.spt_values</code> table reference
     */
    public SptValues(Name alias) {
        this(alias, SPT_VALUES);
    }

    private SptValues(Name alias, Table<SptValuesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SptValues(Name alias, Table<SptValuesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("\r\ncreate view spt_values as\r\nselect name collate database_default as name,\r\n	number,\r\n	type collate database_default as type,\r\n	low, high, status\r\nfrom sys.spt_values\r\n"));
    }

    public <O extends Record> SptValues(Table<O> child, ForeignKey<O, SptValuesRecord> key) {
        super(child, key, SPT_VALUES);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public SptValues as(String alias) {
        return new SptValues(DSL.name(alias), this);
    }

    @Override
    public SptValues as(Name alias) {
        return new SptValues(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SptValues rename(String name) {
        return new SptValues(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SptValues rename(Name name) {
        return new SptValues(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, Integer, String, Integer, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
