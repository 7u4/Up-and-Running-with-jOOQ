/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import jooq.generated.DefaultSchema;
import jooq.generated.Keys;
import jooq.generated.tables.records.CustomerdetailRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customerdetail extends TableImpl<CustomerdetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CUSTOMERDETAIL</code>
     */
    public static final Customerdetail CUSTOMERDETAIL = new Customerdetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerdetailRecord> getRecordType() {
        return CustomerdetailRecord.class;
    }

    /**
     * The column <code>CUSTOMERDETAIL.CUSTOMER_NUMBER</code>.
     */
    public final TableField<CustomerdetailRecord, Long> CUSTOMER_NUMBER = createField(DSL.name("CUSTOMER_NUMBER"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CUSTOMERDETAIL.ADDRESS_LINE_FIRST</code>.
     */
    public final TableField<CustomerdetailRecord, String> ADDRESS_LINE_FIRST = createField(DSL.name("ADDRESS_LINE_FIRST"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>CUSTOMERDETAIL.ADDRESS_LINE_SECOND</code>.
     */
    public final TableField<CustomerdetailRecord, String> ADDRESS_LINE_SECOND = createField(DSL.name("ADDRESS_LINE_SECOND"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMERDETAIL.CITY</code>.
     */
    public final TableField<CustomerdetailRecord, String> CITY = createField(DSL.name("CITY"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>CUSTOMERDETAIL.STATE</code>.
     */
    public final TableField<CustomerdetailRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMERDETAIL.POSTAL_CODE</code>.
     */
    public final TableField<CustomerdetailRecord, String> POSTAL_CODE = createField(DSL.name("POSTAL_CODE"), SQLDataType.VARCHAR(15).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMERDETAIL.COUNTRY</code>.
     */
    public final TableField<CustomerdetailRecord, String> COUNTRY = createField(DSL.name("COUNTRY"), SQLDataType.VARCHAR(50), this, "");

    private Customerdetail(Name alias, Table<CustomerdetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customerdetail(Name alias, Table<CustomerdetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CUSTOMERDETAIL</code> table reference
     */
    public Customerdetail(String alias) {
        this(DSL.name(alias), CUSTOMERDETAIL);
    }

    /**
     * Create an aliased <code>CUSTOMERDETAIL</code> table reference
     */
    public Customerdetail(Name alias) {
        this(alias, CUSTOMERDETAIL);
    }

    /**
     * Create a <code>CUSTOMERDETAIL</code> table reference
     */
    public Customerdetail() {
        this(DSL.name("CUSTOMERDETAIL"), null);
    }

    public <O extends Record> Customerdetail(Table<O> child, ForeignKey<O, CustomerdetailRecord> key) {
        super(child, key, CUSTOMERDETAIL);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CustomerdetailRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    @Override
    public List<UniqueKey<CustomerdetailRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerdetailRecord>>asList(Keys.CONSTRAINT_C);
    }

    @Override
    public List<ForeignKey<CustomerdetailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomerdetailRecord, ?>>asList(Keys.CUSTOMERS_DETAILS_IBFK_1);
    }

    public Customer customer() {
        return new Customer(this, Keys.CUSTOMERS_DETAILS_IBFK_1);
    }

    @Override
    public Customerdetail as(String alias) {
        return new Customerdetail(DSL.name(alias), this);
    }

    @Override
    public Customerdetail as(Name alias) {
        return new Customerdetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerdetail rename(String name) {
        return new Customerdetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerdetail rename(Name name) {
        return new Customerdetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
