/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import jooq.generated.tables.BankTransaction;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4",
        "schema version:1.3"
    },
    date = "2020-12-28T06:17:05.627Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankTransactionRecord extends UpdatableRecordImpl<BankTransactionRecord> implements Record7<Long, String, String, BigDecimal, LocalDateTime, Long, String> {

    private static final long serialVersionUID = -2026846287;

    /**
     * Setter for <code>classicmodels.bank_transaction.transaction_id</code>.
     */
    public void setTransactionId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>classicmodels.bank_transaction.transaction_id</code>.
     */
    public Long getTransactionId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>classicmodels.bank_transaction.bank_name</code>.
     */
    public void setBankName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>classicmodels.bank_transaction.bank_name</code>.
     */
    @NotNull
    @Size(max = 50)
    public String getBankName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>classicmodels.bank_transaction.bank_iban</code>.
     */
    public void setBankIban(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>classicmodels.bank_transaction.bank_iban</code>.
     */
    @NotNull
    @Size(max = 50)
    public String getBankIban() {
        return (String) get(2);
    }

    /**
     * Setter for <code>classicmodels.bank_transaction.transfer_amount</code>.
     */
    public void setTransferAmount(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>classicmodels.bank_transaction.transfer_amount</code>.
     */
    @NotNull
    public BigDecimal getTransferAmount() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>classicmodels.bank_transaction.caching_date</code>.
     */
    public void setCachingDate(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>classicmodels.bank_transaction.caching_date</code>.
     */
    public LocalDateTime getCachingDate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>classicmodels.bank_transaction.customer_number</code>.
     */
    public void setCustomerNumber(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>classicmodels.bank_transaction.customer_number</code>.
     */
    @NotNull
    public Long getCustomerNumber() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>classicmodels.bank_transaction.check_number</code>.
     */
    public void setCheckNumber(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>classicmodels.bank_transaction.check_number</code>.
     */
    @NotNull
    @Size(max = 50)
    public String getCheckNumber() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, BigDecimal, LocalDateTime, Long, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, String, BigDecimal, LocalDateTime, Long, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return BankTransaction.BANK_TRANSACTION.TRANSACTION_ID;
    }

    @Override
    public Field<String> field2() {
        return BankTransaction.BANK_TRANSACTION.BANK_NAME;
    }

    @Override
    public Field<String> field3() {
        return BankTransaction.BANK_TRANSACTION.BANK_IBAN;
    }

    @Override
    public Field<BigDecimal> field4() {
        return BankTransaction.BANK_TRANSACTION.TRANSFER_AMOUNT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return BankTransaction.BANK_TRANSACTION.CACHING_DATE;
    }

    @Override
    public Field<Long> field6() {
        return BankTransaction.BANK_TRANSACTION.CUSTOMER_NUMBER;
    }

    @Override
    public Field<String> field7() {
        return BankTransaction.BANK_TRANSACTION.CHECK_NUMBER;
    }

    @Override
    public Long component1() {
        return getTransactionId();
    }

    @Override
    public String component2() {
        return getBankName();
    }

    @Override
    public String component3() {
        return getBankIban();
    }

    @Override
    public BigDecimal component4() {
        return getTransferAmount();
    }

    @Override
    public LocalDateTime component5() {
        return getCachingDate();
    }

    @Override
    public Long component6() {
        return getCustomerNumber();
    }

    @Override
    public String component7() {
        return getCheckNumber();
    }

    @Override
    public Long value1() {
        return getTransactionId();
    }

    @Override
    public String value2() {
        return getBankName();
    }

    @Override
    public String value3() {
        return getBankIban();
    }

    @Override
    public BigDecimal value4() {
        return getTransferAmount();
    }

    @Override
    public LocalDateTime value5() {
        return getCachingDate();
    }

    @Override
    public Long value6() {
        return getCustomerNumber();
    }

    @Override
    public String value7() {
        return getCheckNumber();
    }

    @Override
    public BankTransactionRecord value1(Long value) {
        setTransactionId(value);
        return this;
    }

    @Override
    public BankTransactionRecord value2(String value) {
        setBankName(value);
        return this;
    }

    @Override
    public BankTransactionRecord value3(String value) {
        setBankIban(value);
        return this;
    }

    @Override
    public BankTransactionRecord value4(BigDecimal value) {
        setTransferAmount(value);
        return this;
    }

    @Override
    public BankTransactionRecord value5(LocalDateTime value) {
        setCachingDate(value);
        return this;
    }

    @Override
    public BankTransactionRecord value6(Long value) {
        setCustomerNumber(value);
        return this;
    }

    @Override
    public BankTransactionRecord value7(String value) {
        setCheckNumber(value);
        return this;
    }

    @Override
    public BankTransactionRecord values(Long value1, String value2, String value3, BigDecimal value4, LocalDateTime value5, Long value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankTransactionRecord
     */
    public BankTransactionRecord() {
        super(BankTransaction.BANK_TRANSACTION);
    }

    /**
     * Create a detached, initialised BankTransactionRecord
     */
    public BankTransactionRecord(Long transactionId, String bankName, String bankIban, BigDecimal transferAmount, LocalDateTime cachingDate, Long customerNumber, String checkNumber) {
        super(BankTransaction.BANK_TRANSACTION);

        set(0, transactionId);
        set(1, bankName);
        set(2, bankIban);
        set(3, transferAmount);
        set(4, cachingDate);
        set(5, customerNumber);
        set(6, checkNumber);
    }
}
