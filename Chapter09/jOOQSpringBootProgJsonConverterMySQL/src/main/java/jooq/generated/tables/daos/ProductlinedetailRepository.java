/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos;


import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.tables.Productlinedetail;
import jooq.generated.tables.pojos.JooqProductlinedetail;
import jooq.generated.tables.records.ProductlinedetailRecord;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4",
        "schema version:1.3"
    },
    date = "2020-12-28T06:17:05.627Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ProductlinedetailRepository extends DAOImpl<ProductlinedetailRecord, JooqProductlinedetail, Record2<String, Long>> {

    /**
     * Create a new ProductlinedetailRepository without any configuration
     */
    public ProductlinedetailRepository() {
        super(Productlinedetail.PRODUCTLINEDETAIL, JooqProductlinedetail.class);
    }

    /**
     * Create a new ProductlinedetailRepository with an attached configuration
     */
    @Autowired
    public ProductlinedetailRepository(Configuration configuration) {
        super(Productlinedetail.PRODUCTLINEDETAIL, JooqProductlinedetail.class, configuration);
    }

    @Override
    public Record2<String, Long> getId(JooqProductlinedetail object) {
        return compositeKeyRecord(object.getProductLine(), object.getCode());
    }

    /**
     * Fetch records that have <code>product_line BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlinedetail> fetchRangeOfProductLine(String lowerInclusive, String upperInclusive) {
        return fetchRange(Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_line IN (values)</code>
     */
    public List<JooqProductlinedetail> fetchByProductLine(String... values) {
        return fetch(Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE, values);
    }

    /**
     * Fetch a unique record that has <code>product_line = value</code>
     */
    public JooqProductlinedetail fetchOneByProductLine(String value) {
        return fetchOne(Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlinedetail> fetchRangeOfCode(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Productlinedetail.PRODUCTLINEDETAIL.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<JooqProductlinedetail> fetchByCode(Long... values) {
        return fetch(Productlinedetail.PRODUCTLINEDETAIL.CODE, values);
    }

    /**
     * Fetch records that have <code>line_capacity BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlinedetail> fetchRangeOfLineCapacity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Productlinedetail.PRODUCTLINEDETAIL.LINE_CAPACITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>line_capacity IN (values)</code>
     */
    public List<JooqProductlinedetail> fetchByLineCapacity(String... values) {
        return fetch(Productlinedetail.PRODUCTLINEDETAIL.LINE_CAPACITY, values);
    }

    /**
     * Fetch records that have <code>line_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqProductlinedetail> fetchRangeOfLineType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Productlinedetail.PRODUCTLINEDETAIL.LINE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>line_type IN (values)</code>
     */
    public List<JooqProductlinedetail> fetchByLineType(Integer... values) {
        return fetch(Productlinedetail.PRODUCTLINEDETAIL.LINE_TYPE, values);
    }
}
