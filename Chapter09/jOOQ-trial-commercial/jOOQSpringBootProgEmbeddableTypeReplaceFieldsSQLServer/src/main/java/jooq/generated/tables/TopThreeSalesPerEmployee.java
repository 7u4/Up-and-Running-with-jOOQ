/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import javax.annotation.processing.Generated;

import jooq.generated.Dbo;
import jooq.generated.tables.records.TopThreeSalesPerEmployeeRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TopThreeSalesPerEmployee extends TableImpl<TopThreeSalesPerEmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>classicmodels.dbo.top_three_sales_per_employee</code>
     */
    public static final TopThreeSalesPerEmployee TOP_THREE_SALES_PER_EMPLOYEE = new TopThreeSalesPerEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopThreeSalesPerEmployeeRecord> getRecordType() {
        return TopThreeSalesPerEmployeeRecord.class;
    }

    /**
     * The column <code>classicmodels.dbo.top_three_sales_per_employee.sales</code>.
     */
    public final TableField<TopThreeSalesPerEmployeeRecord, Double> SALES = createField(DSL.name("sales"), SQLDataType.FLOAT, this, "");

    private TopThreeSalesPerEmployee(Name alias, Table<TopThreeSalesPerEmployeeRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private TopThreeSalesPerEmployee(Name alias, Table<TopThreeSalesPerEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>classicmodels.dbo.top_three_sales_per_employee</code> table reference
     */
    public TopThreeSalesPerEmployee(String alias) {
        this(DSL.name(alias), TOP_THREE_SALES_PER_EMPLOYEE);
    }

    /**
     * Create an aliased <code>classicmodels.dbo.top_three_sales_per_employee</code> table reference
     */
    public TopThreeSalesPerEmployee(Name alias) {
        this(alias, TOP_THREE_SALES_PER_EMPLOYEE);
    }

    /**
     * Create a <code>classicmodels.dbo.top_three_sales_per_employee</code> table reference
     */
    public TopThreeSalesPerEmployee() {
        this(DSL.name("top_three_sales_per_employee"), null);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public TopThreeSalesPerEmployee as(String alias) {
        return new TopThreeSalesPerEmployee(DSL.name(alias), this, parameters);
    }

    @Override
    public TopThreeSalesPerEmployee as(Name alias) {
        return new TopThreeSalesPerEmployee(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public TopThreeSalesPerEmployee rename(String name) {
        return new TopThreeSalesPerEmployee(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public TopThreeSalesPerEmployee rename(Name name) {
        return new TopThreeSalesPerEmployee(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Double> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public TopThreeSalesPerEmployee call(
          Long employeeNr
    ) {
        TopThreeSalesPerEmployee result = new TopThreeSalesPerEmployee(DSL.name("top_three_sales_per_employee"), null, new Field[] {
              DSL.val(employeeNr, SQLDataType.BIGINT)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public TopThreeSalesPerEmployee call(
          Field<Long> employeeNr
    ) {
        TopThreeSalesPerEmployee result = new TopThreeSalesPerEmployee(DSL.name("top_three_sales_per_employee"), null, new Field[] {
              employeeNr
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
