/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records;


import com.classicmodels.enums.StarType;
import com.classicmodels.enums.TrendType;

import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;

import jooq.generated.tables.Sale;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SaleRecord extends UpdatableRecordImpl<SaleRecord> implements Record8<Long, Integer, Double, Long, Boolean, StarType, Integer, TrendType> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>classicmodels.dbo.sale.sale_id</code>.
     */
    public void setSaleId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.sale_id</code>.
     */
    public Long getSaleId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>classicmodels.dbo.sale.fiscal_year</code>.
     */
    public void setFiscalYear(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.fiscal_year</code>.
     */
    @NotNull
    public Integer getFiscalYear() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>classicmodels.dbo.sale.sale</code>.
     */
    public void setSale(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.sale</code>.
     */
    @NotNull
    public Double getSale() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>classicmodels.dbo.sale.employee_number</code>.
     */
    public void setEmployeeNumber(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.employee_number</code>.
     */
    public Long getEmployeeNumber() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>classicmodels.dbo.sale.hot</code>.
     */
    public void setHot(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.hot</code>.
     */
    public Boolean getHot() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>classicmodels.dbo.sale.rate</code>.
     */
    public void setRate(StarType value) {
        set(5, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.rate</code>.
     */
    public StarType getRate() {
        return (StarType) get(5);
    }

    /**
     * Setter for <code>classicmodels.dbo.sale.vat</code>.
     */
    public void setVat(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.vat</code>.
     */
    public Integer getVat() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>classicmodels.dbo.sale.trend</code>.
     */
    public void setTrend(TrendType value) {
        set(7, value);
    }

    /**
     * Getter for <code>classicmodels.dbo.sale.trend</code>.
     */
    public TrendType getTrend() {
        return (TrendType) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, Double, Long, Boolean, StarType, Integer, TrendType> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Integer, Double, Long, Boolean, StarType, Integer, TrendType> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Sale.SALE.SALE_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Sale.SALE.FISCAL_YEAR;
    }

    @Override
    public Field<Double> field3() {
        return Sale.SALE.SALE_;
    }

    @Override
    public Field<Long> field4() {
        return Sale.SALE.EMPLOYEE_NUMBER;
    }

    @Override
    public Field<Boolean> field5() {
        return Sale.SALE.HOT;
    }

    @Override
    public Field<StarType> field6() {
        return Sale.SALE.RATE;
    }

    @Override
    public Field<Integer> field7() {
        return Sale.SALE.VAT;
    }

    @Override
    public Field<TrendType> field8() {
        return Sale.SALE.TREND;
    }

    @Override
    public Long component1() {
        return getSaleId();
    }

    @Override
    public Integer component2() {
        return getFiscalYear();
    }

    @Override
    public Double component3() {
        return getSale();
    }

    @Override
    public Long component4() {
        return getEmployeeNumber();
    }

    @Override
    public Boolean component5() {
        return getHot();
    }

    @Override
    public StarType component6() {
        return getRate();
    }

    @Override
    public Integer component7() {
        return getVat();
    }

    @Override
    public TrendType component8() {
        return getTrend();
    }

    @Override
    public Long value1() {
        return getSaleId();
    }

    @Override
    public Integer value2() {
        return getFiscalYear();
    }

    @Override
    public Double value3() {
        return getSale();
    }

    @Override
    public Long value4() {
        return getEmployeeNumber();
    }

    @Override
    public Boolean value5() {
        return getHot();
    }

    @Override
    public StarType value6() {
        return getRate();
    }

    @Override
    public Integer value7() {
        return getVat();
    }

    @Override
    public TrendType value8() {
        return getTrend();
    }

    @Override
    public SaleRecord value1(Long value) {
        setSaleId(value);
        return this;
    }

    @Override
    public SaleRecord value2(Integer value) {
        setFiscalYear(value);
        return this;
    }

    @Override
    public SaleRecord value3(Double value) {
        setSale(value);
        return this;
    }

    @Override
    public SaleRecord value4(Long value) {
        setEmployeeNumber(value);
        return this;
    }

    @Override
    public SaleRecord value5(Boolean value) {
        setHot(value);
        return this;
    }

    @Override
    public SaleRecord value6(StarType value) {
        setRate(value);
        return this;
    }

    @Override
    public SaleRecord value7(Integer value) {
        setVat(value);
        return this;
    }

    @Override
    public SaleRecord value8(TrendType value) {
        setTrend(value);
        return this;
    }

    @Override
    public SaleRecord values(Long value1, Integer value2, Double value3, Long value4, Boolean value5, StarType value6, Integer value7, TrendType value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SaleRecord
     */
    public SaleRecord() {
        super(Sale.SALE);
    }

    /**
     * Create a detached, initialised SaleRecord
     */
    public SaleRecord(Long saleId, Integer fiscalYear, Double sale, Long employeeNumber, Boolean hot, StarType rate, Integer vat, TrendType trend) {
        super(Sale.SALE);

        setSaleId(saleId);
        setFiscalYear(fiscalYear);
        setSale(sale);
        setEmployeeNumber(employeeNumber);
        setHot(hot);
        setRate(rate);
        setVat(vat);
        setTrend(trend);
    }
}
