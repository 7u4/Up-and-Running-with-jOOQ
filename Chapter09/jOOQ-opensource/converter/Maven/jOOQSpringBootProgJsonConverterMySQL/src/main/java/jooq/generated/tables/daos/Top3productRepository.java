/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos;


import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.tables.Top3product;
import jooq.generated.tables.pojos.JooqTop3product;
import jooq.generated.tables.records.Top3productRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4",
        "schema version:1.3"
    },
    date = "2020-12-28T06:17:05.627Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class Top3productRepository extends DAOImpl<Top3productRecord, JooqTop3product, Long> {

    /**
     * Create a new Top3productRepository without any configuration
     */
    public Top3productRepository() {
        super(Top3product.TOP3PRODUCT, JooqTop3product.class);
    }

    /**
     * Create a new Top3productRepository with an attached configuration
     */
    @Autowired
    public Top3productRepository(Configuration configuration) {
        super(Top3product.TOP3PRODUCT, JooqTop3product.class, configuration);
    }

    @Override
    public Long getId(JooqTop3product object) {
        return object.getProductId();
    }

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqTop3product> fetchRangeOfProductId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Top3product.TOP3PRODUCT.PRODUCT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    public List<JooqTop3product> fetchByProductId(Long... values) {
        return fetch(Top3product.TOP3PRODUCT.PRODUCT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>product_id = value</code>
     */
    public JooqTop3product fetchOneByProductId(Long value) {
        return fetchOne(Top3product.TOP3PRODUCT.PRODUCT_ID, value);
    }

    /**
     * Fetch records that have <code>product_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqTop3product> fetchRangeOfProductName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Top3product.TOP3PRODUCT.PRODUCT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_name IN (values)</code>
     */
    public List<JooqTop3product> fetchByProductName(String... values) {
        return fetch(Top3product.TOP3PRODUCT.PRODUCT_NAME, values);
    }
}
