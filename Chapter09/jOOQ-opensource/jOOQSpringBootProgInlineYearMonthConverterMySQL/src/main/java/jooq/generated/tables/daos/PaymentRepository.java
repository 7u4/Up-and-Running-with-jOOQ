/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.tables.Payment;
import jooq.generated.tables.pojos.JooqPayment;
import jooq.generated.tables.records.PaymentRecord;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4",
        "schema version:1.1"
    },
    date = "2020-12-29T07:38:31.604Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class PaymentRepository extends DAOImpl<PaymentRecord, JooqPayment, Record2<Long, String>> {

    /**
     * Create a new PaymentRepository without any configuration
     */
    public PaymentRepository() {
        super(Payment.PAYMENT, JooqPayment.class);
    }

    /**
     * Create a new PaymentRepository with an attached configuration
     */
    @Autowired
    public PaymentRepository(Configuration configuration) {
        super(Payment.PAYMENT, JooqPayment.class, configuration);
    }

    @Override
    public Record2<Long, String> getId(JooqPayment object) {
        return compositeKeyRecord(object.getCustomerNumber(), object.getCheckNumber());
    }

    /**
     * Fetch records that have <code>customer_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayment> fetchRangeOfCustomerNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Payment.PAYMENT.CUSTOMER_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customer_number IN (values)</code>
     */
    public List<JooqPayment> fetchByCustomerNumber(Long... values) {
        return fetch(Payment.PAYMENT.CUSTOMER_NUMBER, values);
    }

    /**
     * Fetch records that have <code>check_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayment> fetchRangeOfCheckNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Payment.PAYMENT.CHECK_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>check_number IN (values)</code>
     */
    public List<JooqPayment> fetchByCheckNumber(String... values) {
        return fetch(Payment.PAYMENT.CHECK_NUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>check_number = value</code>
     */
    public JooqPayment fetchOneByCheckNumber(String value) {
        return fetchOne(Payment.PAYMENT.CHECK_NUMBER, value);
    }

    /**
     * Fetch records that have <code>payment_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayment> fetchRangeOfPaymentDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Payment.PAYMENT.PAYMENT_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payment_date IN (values)</code>
     */
    public List<JooqPayment> fetchByPaymentDate(LocalDateTime... values) {
        return fetch(Payment.PAYMENT.PAYMENT_DATE, values);
    }

    /**
     * Fetch records that have <code>invoice_amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayment> fetchRangeOfInvoiceAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Payment.PAYMENT.INVOICE_AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>invoice_amount IN (values)</code>
     */
    public List<JooqPayment> fetchByInvoiceAmount(BigDecimal... values) {
        return fetch(Payment.PAYMENT.INVOICE_AMOUNT, values);
    }

    /**
     * Fetch records that have <code>caching_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqPayment> fetchRangeOfCachingDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Payment.PAYMENT.CACHING_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>caching_date IN (values)</code>
     */
    public List<JooqPayment> fetchByCachingDate(LocalDateTime... values) {
        return fetch(Payment.PAYMENT.CACHING_DATE, values);
    }
}
