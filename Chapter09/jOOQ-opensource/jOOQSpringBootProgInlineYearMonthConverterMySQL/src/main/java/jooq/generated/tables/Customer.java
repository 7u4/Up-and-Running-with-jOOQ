/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.math.BigDecimal;
import java.time.YearMonth;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.Classicmodels;
import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.tables.records.CustomerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4",
        "schema version:1.1"
    },
    date = "2020-12-29T07:38:31.604Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = -1858056145;

    /**
     * The reference instance of <code>classicmodels.customer</code>
     */
    public static final Customer CUSTOMER = new Customer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>classicmodels.customer.customer_number</code>.
     */
    public final TableField<CustomerRecord, Long> CUSTOMER_NUMBER = createField(DSL.name("customer_number"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>classicmodels.customer.customer_name</code>.
     */
    public final TableField<CustomerRecord, String> CUSTOMER_NAME = createField(DSL.name("customer_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.customer.contact_last_name</code>.
     */
    public final TableField<CustomerRecord, String> CONTACT_LAST_NAME = createField(DSL.name("contact_last_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.customer.contact_first_name</code>.
     */
    public final TableField<CustomerRecord, String> CONTACT_FIRST_NAME = createField(DSL.name("contact_first_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.customer.phone</code>.
     */
    public final TableField<CustomerRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.customer.sales_rep_employee_number</code>.
     */
    public final TableField<CustomerRecord, Long> SALES_REP_EMPLOYEE_NUMBER = createField(DSL.name("sales_rep_employee_number"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>classicmodels.customer.credit_limit</code>.
     */
    public final TableField<CustomerRecord, BigDecimal> CREDIT_LIMIT = createField(DSL.name("credit_limit"), org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>classicmodels.customer.first_buy_date</code>.
     */
    public final TableField<CustomerRecord, YearMonth> FIRST_BUY_DATE = createField(DSL.name("first_buy_date"), org.jooq.impl.SQLDataType.INTEGER, this, "", org.jooq.Converter.ofNullable(Integer.class, YearMonth.class, (Integer t) -> { return YearMonth.of(t / 100, t % 100); }, (YearMonth u) -> { return (u.getYear() * 100) + u.getMonth().getValue(); }));

    /**
     * Create a <code>classicmodels.customer</code> table reference
     */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    /**
     * Create an aliased <code>classicmodels.customer</code> table reference
     */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>classicmodels.customer</code> table reference
     */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Customer(Table<O> child, ForeignKey<O, CustomerRecord> key) {
        super(child, key, CUSTOMER);
    }

    @Override
    public Schema getSchema() {
        return Classicmodels.CLASSICMODELS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMER_SALES_REP_EMPLOYEE_NUMBER);
    }

    @Override
    public Identity<CustomerRecord, Long> getIdentity() {
        return Keys.IDENTITY_CUSTOMER;
    }

    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMER_PRIMARY;
    }

    @Override
    public List<UniqueKey<CustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerRecord>>asList(Keys.KEY_CUSTOMER_PRIMARY);
    }

    @Override
    public List<ForeignKey<CustomerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomerRecord, ?>>asList(Keys.CUSTOMERS_IBFK_1);
    }

    public Employee employee() {
        return new Employee(this, Keys.CUSTOMERS_IBFK_1);
    }

    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, Long, BigDecimal, YearMonth> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
