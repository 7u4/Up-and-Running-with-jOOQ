/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records;


import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import jooq.generated.tables.Department;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepartmentRecord extends UpdatableRecordImpl<DepartmentRecord> implements Record7<Integer, String, String, Short, String, String[], Object> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.department.department_id</code>.
     */
    public void setDepartmentId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.department.department_id</code>.
     */
    public Integer getDepartmentId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.department.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.department.name</code>.
     */
    @NotNull
    @Size(max = 50)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.department.phone</code>.
     */
    public void setPhone(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.department.phone</code>.
     */
    @NotNull
    @Size(max = 50)
    public String getPhone() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.department.code</code>.
     */
    public void setCode(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.department.code</code>.
     */
    public Short getCode() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>public.department.office_code</code>.
     */
    public void setOfficeCode(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.department.office_code</code>.
     */
    @NotNull
    @Size(max = 10)
    public String getOfficeCode() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.department.topic</code>.
     */
    public void setTopic(String[] value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.department.topic</code>.
     */
    @NotNull
    public String[] getTopic() {
        return (String[]) get(5);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public void setDepNetIpv4(Object value) {
        set(6, value);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public Object getDepNetIpv4() {
        return get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Short, String, String[], Object> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, Short, String, String[], Object> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Department.DEPARTMENT.DEPARTMENT_ID;
    }

    @Override
    public Field<String> field2() {
        return Department.DEPARTMENT.NAME;
    }

    @Override
    public Field<String> field3() {
        return Department.DEPARTMENT.PHONE;
    }

    @Override
    public Field<Short> field4() {
        return Department.DEPARTMENT.CODE;
    }

    @Override
    public Field<String> field5() {
        return Department.DEPARTMENT.OFFICE_CODE;
    }

    @Override
    public Field<String[]> field6() {
        return Department.DEPARTMENT.TOPIC;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field7() {
        return Department.DEPARTMENT.DEP_NET_IPV4;
    }

    @Override
    public Integer component1() {
        return getDepartmentId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getPhone();
    }

    @Override
    public Short component4() {
        return getCode();
    }

    @Override
    public String component5() {
        return getOfficeCode();
    }

    @Override
    public String[] component6() {
        return getTopic();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component7() {
        return getDepNetIpv4();
    }

    @Override
    public Integer value1() {
        return getDepartmentId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getPhone();
    }

    @Override
    public Short value4() {
        return getCode();
    }

    @Override
    public String value5() {
        return getOfficeCode();
    }

    @Override
    public String[] value6() {
        return getTopic();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value7() {
        return getDepNetIpv4();
    }

    @Override
    public DepartmentRecord value1(Integer value) {
        setDepartmentId(value);
        return this;
    }

    @Override
    public DepartmentRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public DepartmentRecord value3(String value) {
        setPhone(value);
        return this;
    }

    @Override
    public DepartmentRecord value4(Short value) {
        setCode(value);
        return this;
    }

    @Override
    public DepartmentRecord value5(String value) {
        setOfficeCode(value);
        return this;
    }

    @Override
    public DepartmentRecord value6(String[] value) {
        setTopic(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public DepartmentRecord value7(Object value) {
        setDepNetIpv4(value);
        return this;
    }

    @Override
    public DepartmentRecord values(Integer value1, String value2, String value3, Short value4, String value5, String[] value6, Object value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DepartmentRecord
     */
    public DepartmentRecord() {
        super(Department.DEPARTMENT);
    }

    /**
     * Create a detached, initialised DepartmentRecord
     */
    public DepartmentRecord(Integer departmentId, String name, String phone, Short code, String officeCode, String[] topic, Object depNetIpv4) {
        super(Department.DEPARTMENT);

        setDepartmentId(departmentId);
        setName(name);
        setPhone(phone);
        setCode(code);
        setOfficeCode(officeCode);
        setTopic(topic);
        setDepNetIpv4(depNetIpv4);
    }
}
