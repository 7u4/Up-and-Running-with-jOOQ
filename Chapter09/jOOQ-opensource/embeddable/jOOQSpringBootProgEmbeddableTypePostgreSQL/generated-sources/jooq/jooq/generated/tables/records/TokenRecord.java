/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records;


import java.time.LocalDateTime;

import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;

import jooq.generated.tables.Token;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenRecord extends UpdatableRecordImpl<TokenRecord> implements Record4<Long, Long, Double, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.token.token_id</code>.
     */
    public void setTokenId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.token.token_id</code>.
     */
    public Long getTokenId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.token.sale_id</code>.
     */
    public void setSaleId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.token.sale_id</code>.
     */
    @NotNull
    public Long getSaleId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.token.amount</code>.
     */
    public void setAmount(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.token.amount</code>.
     */
    @NotNull
    public Double getAmount() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>public.token.updated_on</code>.
     */
    public void setUpdatedOn(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.token.updated_on</code>.
     */
    public LocalDateTime getUpdatedOn() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Double, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Long, Double, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Token.TOKEN.TOKEN_ID;
    }

    @Override
    public Field<Long> field2() {
        return Token.TOKEN.SALE_ID;
    }

    @Override
    public Field<Double> field3() {
        return Token.TOKEN.AMOUNT;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Token.TOKEN.UPDATED_ON;
    }

    @Override
    public Long component1() {
        return getTokenId();
    }

    @Override
    public Long component2() {
        return getSaleId();
    }

    @Override
    public Double component3() {
        return getAmount();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdatedOn();
    }

    @Override
    public Long value1() {
        return getTokenId();
    }

    @Override
    public Long value2() {
        return getSaleId();
    }

    @Override
    public Double value3() {
        return getAmount();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdatedOn();
    }

    @Override
    public TokenRecord value1(Long value) {
        setTokenId(value);
        return this;
    }

    @Override
    public TokenRecord value2(Long value) {
        setSaleId(value);
        return this;
    }

    @Override
    public TokenRecord value3(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public TokenRecord value4(LocalDateTime value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public TokenRecord values(Long value1, Long value2, Double value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenRecord
     */
    public TokenRecord() {
        super(Token.TOKEN);
    }

    /**
     * Create a detached, initialised TokenRecord
     */
    public TokenRecord(Long tokenId, Long saleId, Double amount, LocalDateTime updatedOn) {
        super(Token.TOKEN);

        setTokenId(tokenId);
        setSaleId(saleId);
        setAmount(amount);
        setUpdatedOn(updatedOn);
    }
}
