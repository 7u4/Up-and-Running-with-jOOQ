/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.DepartmentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Department extends TableImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.department</code>
     */
    public static final Department DEPARTMENT = new Department();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRecord> getRecordType() {
        return DepartmentRecord.class;
    }

    /**
     * The column <code>public.department.department_id</code>.
     */
    public final TableField<DepartmentRecord, Integer> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.department.name</code>.
     */
    public final TableField<DepartmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.department.phone</code>.
     */
    public final TableField<DepartmentRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.department.code</code>.
     */
    public final TableField<DepartmentRecord, Short> CODE = createField(DSL.name("code"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.department.office_code</code>.
     */
    public final TableField<DepartmentRecord, String> OFFICE_CODE = createField(DSL.name("office_code"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.department.topic</code>.
     */
    public final TableField<DepartmentRecord, String[]> TOPIC = createField(DSL.name("topic"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<DepartmentRecord, Object> DEP_NET_IPV4 = createField(DSL.name("dep_net_ipv4"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "");

    /**
     * The column <code>public.department.local_budget</code>.
     */
    public final TableField<DepartmentRecord, Double> LOCAL_BUDGET = createField(DSL.name("local_budget"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.profit</code>.
     */
    public final TableField<DepartmentRecord, Double> PROFIT = createField(DSL.name("profit"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.forecast_profit</code>.
     */
    public final TableField<DepartmentRecord, Double> FORECAST_PROFIT = createField(DSL.name("forecast_profit"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.cash</code>.
     */
    public final TableField<DepartmentRecord, Double> CASH = createField(DSL.name("cash"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.accounts_receivable</code>.
     */
    public final TableField<DepartmentRecord, Double> ACCOUNTS_RECEIVABLE = createField(DSL.name("accounts_receivable"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.inventories</code>.
     */
    public final TableField<DepartmentRecord, Double> INVENTORIES = createField(DSL.name("inventories"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.accounts_payable</code>.
     */
    public final TableField<DepartmentRecord, Double> ACCOUNTS_PAYABLE = createField(DSL.name("accounts_payable"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.st_borrowing</code>.
     */
    public final TableField<DepartmentRecord, Double> ST_BORROWING = createField(DSL.name("st_borrowing"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.department.accrued_liabilities</code>.
     */
    public final TableField<DepartmentRecord, Double> ACCRUED_LIABILITIES = createField(DSL.name("accrued_liabilities"), SQLDataType.DOUBLE, this, "");

    private Department(Name alias, Table<DepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Department(Name alias, Table<DepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    public Department(String alias) {
        this(DSL.name(alias), DEPARTMENT);
    }

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    public Department(Name alias) {
        this(alias, DEPARTMENT);
    }

    /**
     * Create a <code>public.department</code> table reference
     */
    public Department() {
        this(DSL.name("department"), null);
    }

    public <O extends Record> Department(Table<O> child, ForeignKey<O, DepartmentRecord> key) {
        super(child, key, DEPARTMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DepartmentRecord, Integer> getIdentity() {
        return (Identity<DepartmentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DepartmentRecord> getPrimaryKey() {
        return Keys.DEPARTMENT_PK;
    }

    @Override
    public List<UniqueKey<DepartmentRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartmentRecord>>asList(Keys.DEPARTMENT_PK, Keys.DEPARTMENT_CODE_UK);
    }

    @Override
    public List<ForeignKey<DepartmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DepartmentRecord, ?>>asList(Keys.DEPARTMENT__DEPARTMENT_OFFICE_FK);
    }

    public Office office() {
        return new Office(this, Keys.DEPARTMENT__DEPARTMENT_OFFICE_FK);
    }

    @Override
    public Department as(String alias) {
        return new Department(DSL.name(alias), this);
    }

    @Override
    public Department as(Name alias) {
        return new Department(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(String name) {
        return new Department(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Name name) {
        return new Department(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, String, String, Short, String, String[], Object, Double, Double, Double, Double, Double, Double, Double, Double, Double> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
