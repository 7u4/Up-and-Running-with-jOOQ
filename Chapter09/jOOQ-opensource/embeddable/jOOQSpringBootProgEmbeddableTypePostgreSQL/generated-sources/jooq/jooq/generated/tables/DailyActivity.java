/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.DailyActivityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DailyActivity extends TableImpl<DailyActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.daily_activity</code>
     */
    public static final DailyActivity DAILY_ACTIVITY = new DailyActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DailyActivityRecord> getRecordType() {
        return DailyActivityRecord.class;
    }

    /**
     * The column <code>public.daily_activity.day_id</code>.
     */
    public final TableField<DailyActivityRecord, Integer> DAY_ID = createField(DSL.name("day_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.daily_activity.day_date</code>.
     */
    public final TableField<DailyActivityRecord, LocalDate> DAY_DATE = createField(DSL.name("day_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.daily_activity.sales</code>.
     */
    public final TableField<DailyActivityRecord, Double> SALES = createField(DSL.name("sales"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.daily_activity.visitors</code>.
     */
    public final TableField<DailyActivityRecord, Double> VISITORS = createField(DSL.name("visitors"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.daily_activity.conversion</code>.
     */
    public final TableField<DailyActivityRecord, Double> CONVERSION = createField(DSL.name("conversion"), SQLDataType.DOUBLE.nullable(false), this, "");

    private DailyActivity(Name alias, Table<DailyActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private DailyActivity(Name alias, Table<DailyActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.daily_activity</code> table reference
     */
    public DailyActivity(String alias) {
        this(DSL.name(alias), DAILY_ACTIVITY);
    }

    /**
     * Create an aliased <code>public.daily_activity</code> table reference
     */
    public DailyActivity(Name alias) {
        this(alias, DAILY_ACTIVITY);
    }

    /**
     * Create a <code>public.daily_activity</code> table reference
     */
    public DailyActivity() {
        this(DSL.name("daily_activity"), null);
    }

    public <O extends Record> DailyActivity(Table<O> child, ForeignKey<O, DailyActivityRecord> key) {
        super(child, key, DAILY_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DailyActivityRecord, Integer> getIdentity() {
        return (Identity<DailyActivityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DailyActivityRecord> getPrimaryKey() {
        return Keys.DAILY_ACTIVITY_PK;
    }

    @Override
    public List<UniqueKey<DailyActivityRecord>> getKeys() {
        return Arrays.<UniqueKey<DailyActivityRecord>>asList(Keys.DAILY_ACTIVITY_PK);
    }

    @Override
    public DailyActivity as(String alias) {
        return new DailyActivity(DSL.name(alias), this);
    }

    @Override
    public DailyActivity as(Name alias) {
        return new DailyActivity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DailyActivity rename(String name) {
        return new DailyActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DailyActivity rename(Name name) {
        return new DailyActivity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, LocalDate, Double, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
