/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.math.BigDecimal;

import javax.annotation.processing.Generated;

import jooq.generated.Public;
import jooq.generated.tables.records.CustomerMasterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerMaster extends TableImpl<CustomerMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customer_master</code>
     */
    public static final CustomerMaster CUSTOMER_MASTER = new CustomerMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerMasterRecord> getRecordType() {
        return CustomerMasterRecord.class;
    }

    /**
     * The column <code>public.customer_master.customer_name</code>.
     */
    public final TableField<CustomerMasterRecord, String> CUSTOMER_NAME = createField(DSL.name("customer_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customer_master.credit_limit</code>.
     */
    public final TableField<CustomerMasterRecord, BigDecimal> CREDIT_LIMIT = createField(DSL.name("credit_limit"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.customer_master.city</code>.
     */
    public final TableField<CustomerMasterRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customer_master.country</code>.
     */
    public final TableField<CustomerMasterRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customer_master.address_line_first</code>.
     */
    public final TableField<CustomerMasterRecord, String> ADDRESS_LINE_FIRST = createField(DSL.name("address_line_first"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customer_master.postal_code</code>.
     */
    public final TableField<CustomerMasterRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.customer_master.state</code>.
     */
    public final TableField<CustomerMasterRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(50), this, "");

    private CustomerMaster(Name alias, Table<CustomerMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomerMaster(Name alias, Table<CustomerMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"customer_master\" as  SELECT customer.customer_name,\n    customer.credit_limit,\n    customerdetail.city,\n    customerdetail.country,\n    customerdetail.address_line_first,\n    customerdetail.postal_code,\n    customerdetail.state\n   FROM (customer\n     JOIN customerdetail ON ((customerdetail.customer_number = customer.customer_number)))\n  WHERE (customer.first_buy_date IS NOT NULL);"));
    }

    /**
     * Create an aliased <code>public.customer_master</code> table reference
     */
    public CustomerMaster(String alias) {
        this(DSL.name(alias), CUSTOMER_MASTER);
    }

    /**
     * Create an aliased <code>public.customer_master</code> table reference
     */
    public CustomerMaster(Name alias) {
        this(alias, CUSTOMER_MASTER);
    }

    /**
     * Create a <code>public.customer_master</code> table reference
     */
    public CustomerMaster() {
        this(DSL.name("customer_master"), null);
    }

    public <O extends Record> CustomerMaster(Table<O> child, ForeignKey<O, CustomerMasterRecord> key) {
        super(child, key, CUSTOMER_MASTER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public CustomerMaster as(String alias) {
        return new CustomerMaster(DSL.name(alias), this);
    }

    @Override
    public CustomerMaster as(Name alias) {
        return new CustomerMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerMaster rename(String name) {
        return new CustomerMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerMaster rename(Name name) {
        return new CustomerMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, BigDecimal, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
