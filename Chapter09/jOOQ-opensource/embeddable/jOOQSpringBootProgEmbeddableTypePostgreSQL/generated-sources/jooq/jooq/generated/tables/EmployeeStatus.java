/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.EmployeeStatusRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeStatus extends TableImpl<EmployeeStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employee_status</code>
     */
    public static final EmployeeStatus EMPLOYEE_STATUS = new EmployeeStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeStatusRecord> getRecordType() {
        return EmployeeStatusRecord.class;
    }

    /**
     * The column <code>public.employee_status.id</code>.
     */
    public final TableField<EmployeeStatusRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.employee_status.employee_number</code>.
     */
    public final TableField<EmployeeStatusRecord, Long> EMPLOYEE_NUMBER = createField(DSL.name("employee_number"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.employee_status.status</code>.
     */
    public final TableField<EmployeeStatusRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.employee_status.acquired_date</code>.
     */
    public final TableField<EmployeeStatusRecord, LocalDate> ACQUIRED_DATE = createField(DSL.name("acquired_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private EmployeeStatus(Name alias, Table<EmployeeStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeStatus(Name alias, Table<EmployeeStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employee_status</code> table reference
     */
    public EmployeeStatus(String alias) {
        this(DSL.name(alias), EMPLOYEE_STATUS);
    }

    /**
     * Create an aliased <code>public.employee_status</code> table reference
     */
    public EmployeeStatus(Name alias) {
        this(alias, EMPLOYEE_STATUS);
    }

    /**
     * Create a <code>public.employee_status</code> table reference
     */
    public EmployeeStatus() {
        this(DSL.name("employee_status"), null);
    }

    public <O extends Record> EmployeeStatus(Table<O> child, ForeignKey<O, EmployeeStatusRecord> key) {
        super(child, key, EMPLOYEE_STATUS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<EmployeeStatusRecord, Integer> getIdentity() {
        return (Identity<EmployeeStatusRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmployeeStatusRecord> getPrimaryKey() {
        return Keys.ID_PK;
    }

    @Override
    public List<UniqueKey<EmployeeStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeStatusRecord>>asList(Keys.ID_PK);
    }

    @Override
    public List<ForeignKey<EmployeeStatusRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeeStatusRecord, ?>>asList(Keys.EMPLOYEE_STATUS__EMPLOYEE_STATUS_EMPLOYEE_FK);
    }

    public Employee employee() {
        return new Employee(this, Keys.EMPLOYEE_STATUS__EMPLOYEE_STATUS_EMPLOYEE_FK);
    }

    @Override
    public EmployeeStatus as(String alias) {
        return new EmployeeStatus(DSL.name(alias), this);
    }

    @Override
    public EmployeeStatus as(Name alias) {
        return new EmployeeStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeStatus rename(String name) {
        return new EmployeeStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeStatus rename(Name name) {
        return new EmployeeStatus(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, String, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
