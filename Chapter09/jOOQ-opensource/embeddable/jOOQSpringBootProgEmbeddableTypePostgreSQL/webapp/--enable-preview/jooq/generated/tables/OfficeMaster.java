/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import javax.annotation.processing.Generated;

import jooq.generated.Public;
import jooq.generated.tables.records.OfficeMasterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfficeMaster extends TableImpl<OfficeMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.office_master</code>
     */
    public static final OfficeMaster OFFICE_MASTER = new OfficeMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficeMasterRecord> getRecordType() {
        return OfficeMasterRecord.class;
    }

    /**
     * The column <code>public.office_master.office_code</code>.
     */
    public final TableField<OfficeMasterRecord, String> OFFICE_CODE = createField(DSL.name("office_code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.office_master.city</code>.
     */
    public final TableField<OfficeMasterRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.office_master.country</code>.
     */
    public final TableField<OfficeMasterRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.office_master.state</code>.
     */
    public final TableField<OfficeMasterRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.office_master.phone</code>.
     */
    public final TableField<OfficeMasterRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.office_master.postal_code</code>.
     */
    public final TableField<OfficeMasterRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), jooq.generated.Domains.POSTAL_CODE.getDataType(), this, "");

    private OfficeMaster(Name alias, Table<OfficeMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfficeMaster(Name alias, Table<OfficeMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"office_master\" as  SELECT office.office_code,\n    office.city,\n    office.country,\n    office.state,\n    office.phone,\n    office.postal_code\n   FROM office\n  WHERE (office.city IS NOT NULL);"));
    }

    /**
     * Create an aliased <code>public.office_master</code> table reference
     */
    public OfficeMaster(String alias) {
        this(DSL.name(alias), OFFICE_MASTER);
    }

    /**
     * Create an aliased <code>public.office_master</code> table reference
     */
    public OfficeMaster(Name alias) {
        this(alias, OFFICE_MASTER);
    }

    /**
     * Create a <code>public.office_master</code> table reference
     */
    public OfficeMaster() {
        this(DSL.name("office_master"), null);
    }

    public <O extends Record> OfficeMaster(Table<O> child, ForeignKey<O, OfficeMasterRecord> key) {
        super(child, key, OFFICE_MASTER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public OfficeMaster as(String alias) {
        return new OfficeMaster(DSL.name(alias), this);
    }

    @Override
    public OfficeMaster as(Name alias) {
        return new OfficeMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfficeMaster rename(String name) {
        return new OfficeMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OfficeMaster rename(Name name) {
        return new OfficeMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
