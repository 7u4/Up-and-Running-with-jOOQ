/*
 * This file is generated by jOOQ.
 */
package jooq.generated;


import javax.annotation.processing.Generated;

import jooq.generated.tables.BankTransaction;
import jooq.generated.tables.Customer;
import jooq.generated.tables.Customerdetail;
import jooq.generated.tables.DailyActivity;
import jooq.generated.tables.Department;
import jooq.generated.tables.Employee;
import jooq.generated.tables.EmployeeStatus;
import jooq.generated.tables.Manager;
import jooq.generated.tables.Office;
import jooq.generated.tables.OfficeFlights;
import jooq.generated.tables.OfficeHasManager;
import jooq.generated.tables.Order;
import jooq.generated.tables.Orderdetail;
import jooq.generated.tables.Payment;
import jooq.generated.tables.Product;
import jooq.generated.tables.Productline;
import jooq.generated.tables.Productlinedetail;
import jooq.generated.tables.Sale;
import jooq.generated.tables.Token;
import jooq.generated.tables.Top3product;
import jooq.generated.tables.records.BankTransactionRecord;
import jooq.generated.tables.records.CustomerRecord;
import jooq.generated.tables.records.CustomerdetailRecord;
import jooq.generated.tables.records.DailyActivityRecord;
import jooq.generated.tables.records.DepartmentRecord;
import jooq.generated.tables.records.EmployeeRecord;
import jooq.generated.tables.records.EmployeeStatusRecord;
import jooq.generated.tables.records.ManagerRecord;
import jooq.generated.tables.records.OfficeFlightsRecord;
import jooq.generated.tables.records.OfficeHasManagerRecord;
import jooq.generated.tables.records.OfficeRecord;
import jooq.generated.tables.records.OrderRecord;
import jooq.generated.tables.records.OrderdetailRecord;
import jooq.generated.tables.records.PaymentRecord;
import jooq.generated.tables.records.ProductRecord;
import jooq.generated.tables.records.ProductlineRecord;
import jooq.generated.tables.records.ProductlinedetailRecord;
import jooq.generated.tables.records.SaleRecord;
import jooq.generated.tables.records.TokenRecord;
import jooq.generated.tables.records.Top3productRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BankTransactionRecord> BANK_TRANSACTION_PK = Internal.createUniqueKey(BankTransaction.BANK_TRANSACTION, DSL.name("bank_transaction_pk"), new TableField[] { BankTransaction.BANK_TRANSACTION.TRANSACTION_ID }, true);
    public static final UniqueKey<CustomerRecord> CUSTOMER_NAME_UK = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_name_uk"), new TableField[] { Customer.CUSTOMER.CUSTOMER_NAME }, true);
    public static final UniqueKey<CustomerRecord> CUSTOMER_PK = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pk"), new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final UniqueKey<CustomerdetailRecord> CUSTOMER_ADDRESS_LINE_FIRST_UK = Internal.createUniqueKey(Customerdetail.CUSTOMERDETAIL, DSL.name("customer_address_line_first_uk"), new TableField[] { Customerdetail.CUSTOMERDETAIL.ADDRESS_LINE_FIRST }, true);
    public static final UniqueKey<CustomerdetailRecord> CUSTOMERDETAIL_PK = Internal.createUniqueKey(Customerdetail.CUSTOMERDETAIL, DSL.name("customerdetail_pk"), new TableField[] { Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER }, true);
    public static final UniqueKey<DailyActivityRecord> DAILY_ACTIVITY_PK = Internal.createUniqueKey(DailyActivity.DAILY_ACTIVITY, DSL.name("daily_activity_pk"), new TableField[] { DailyActivity.DAILY_ACTIVITY.DAY_ID }, true);
    public static final UniqueKey<DepartmentRecord> DEPARTMENT_CODE_UK = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("department_code_uk"), new TableField[] { Department.DEPARTMENT.CODE }, true);
    public static final UniqueKey<DepartmentRecord> DEPARTMENT_PK = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("department_pk"), new TableField[] { Department.DEPARTMENT.DEPARTMENT_ID }, true);
    public static final UniqueKey<EmployeeRecord> EMPLOYEE_PK = Internal.createUniqueKey(Employee.EMPLOYEE, DSL.name("employee_pk"), new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final UniqueKey<EmployeeStatusRecord> ID_PK = Internal.createUniqueKey(EmployeeStatus.EMPLOYEE_STATUS, DSL.name("id_pk"), new TableField[] { EmployeeStatus.EMPLOYEE_STATUS.ID }, true);
    public static final UniqueKey<ManagerRecord> MANAGER_PK = Internal.createUniqueKey(Manager.MANAGER, DSL.name("manager_pk"), new TableField[] { Manager.MANAGER.MANAGER_ID }, true);
    public static final UniqueKey<OfficeRecord> OFFICE_PK = Internal.createUniqueKey(Office.OFFICE, DSL.name("office_pk"), new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final UniqueKey<OfficeRecord> OFFICE_POSTAL_CODE_UK = Internal.createUniqueKey(Office.OFFICE, DSL.name("office_postal_code_uk"), new TableField[] { Office.OFFICE.POSTAL_CODE }, true);
    public static final UniqueKey<OfficeFlightsRecord> OFFICE_FLIGHTS_PK = Internal.createUniqueKey(OfficeFlights.OFFICE_FLIGHTS, DSL.name("office_flights_pk"), new TableField[] { OfficeFlights.OFFICE_FLIGHTS.DEPART_TOWN, OfficeFlights.OFFICE_FLIGHTS.ARRIVAL_TOWN }, true);
    public static final UniqueKey<OfficeHasManagerRecord> OFFICE_MANAGER_UK = Internal.createUniqueKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("office_manager_uk"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE, OfficeHasManager.OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID }, true);
    public static final UniqueKey<OrderRecord> ORDER_PK = Internal.createUniqueKey(Order.ORDER, DSL.name("order_pk"), new TableField[] { Order.ORDER.ORDER_ID }, true);
    public static final UniqueKey<OrderdetailRecord> ORDERDETAIL_PK = Internal.createUniqueKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetail_pk"), new TableField[] { Orderdetail.ORDERDETAIL.ORDERDETAIL_ID }, true);
    public static final UniqueKey<OrderdetailRecord> ORDERDETAIL_UK = Internal.createUniqueKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetail_uk"), new TableField[] { Orderdetail.ORDERDETAIL.ORDER_ID, Orderdetail.ORDERDETAIL.PRODUCT_ID }, true);
    public static final UniqueKey<PaymentRecord> CHECK_NUMBER_UK = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("check_number_uk"), new TableField[] { Payment.PAYMENT.CHECK_NUMBER }, true);
    public static final UniqueKey<PaymentRecord> PAYMENT_PK = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("payment_pk"), new TableField[] { Payment.PAYMENT.CUSTOMER_NUMBER, Payment.PAYMENT.CHECK_NUMBER }, true);
    public static final UniqueKey<ProductRecord> PRODUCT_PK = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pk"), new TableField[] { Product.PRODUCT.PRODUCT_ID }, true);
    public static final UniqueKey<ProductlineRecord> PRODUCTLINE_PK = Internal.createUniqueKey(Productline.PRODUCTLINE, DSL.name("productline_pk"), new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE, Productline.PRODUCTLINE.CODE }, true);
    public static final UniqueKey<ProductlineRecord> PRODUCTLINE_UK = Internal.createUniqueKey(Productline.PRODUCTLINE, DSL.name("productline_uk"), new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE }, true);
    public static final UniqueKey<ProductlinedetailRecord> PRODUCTLINEDETAIL_PK = Internal.createUniqueKey(Productlinedetail.PRODUCTLINEDETAIL, DSL.name("productlinedetail_pk"), new TableField[] { Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE, Productlinedetail.PRODUCTLINEDETAIL.CODE }, true);
    public static final UniqueKey<ProductlinedetailRecord> PRODUCTLINEDETAIL_UK = Internal.createUniqueKey(Productlinedetail.PRODUCTLINEDETAIL, DSL.name("productlinedetail_uk"), new TableField[] { Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE }, true);
    public static final UniqueKey<SaleRecord> SALE_PK = Internal.createUniqueKey(Sale.SALE, DSL.name("sale_pk"), new TableField[] { Sale.SALE.SALE_ID }, true);
    public static final UniqueKey<TokenRecord> TOKEN_PK = Internal.createUniqueKey(Token.TOKEN, DSL.name("token_pk"), new TableField[] { Token.TOKEN.TOKEN_ID }, true);
    public static final UniqueKey<Top3productRecord> TOP3PRODUCT_PK = Internal.createUniqueKey(Top3product.TOP3PRODUCT, DSL.name("top3product_pk"), new TableField[] { Top3product.TOP3PRODUCT.PRODUCT_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BankTransactionRecord, PaymentRecord> BANK_TRANSACTION__BANK_TRANSACTION_CUSTOMER_FK = Internal.createForeignKey(BankTransaction.BANK_TRANSACTION, DSL.name("bank_transaction_customer_fk"), new TableField[] { BankTransaction.BANK_TRANSACTION.CUSTOMER_NUMBER, BankTransaction.BANK_TRANSACTION.CHECK_NUMBER }, Keys.PAYMENT_PK, new TableField[] { Payment.PAYMENT.CUSTOMER_NUMBER, Payment.PAYMENT.CHECK_NUMBER }, true);
    public static final ForeignKey<CustomerRecord, EmployeeRecord> CUSTOMER__CUSTOMER_EMPLOYEE_FK = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customer_employee_fk"), new TableField[] { Customer.CUSTOMER.SALES_REP_EMPLOYEE_NUMBER }, Keys.EMPLOYEE_PK, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<CustomerdetailRecord, CustomerRecord> CUSTOMERDETAIL__CUSTOMERDETAIL_CUSTOMER_FK = Internal.createForeignKey(Customerdetail.CUSTOMERDETAIL, DSL.name("customerdetail_customer_fk"), new TableField[] { Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER }, Keys.CUSTOMER_PK, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<DepartmentRecord, OfficeRecord> DEPARTMENT__DEPARTMENT_OFFICE_FK = Internal.createForeignKey(Department.DEPARTMENT, DSL.name("department_office_fk"), new TableField[] { Department.DEPARTMENT.OFFICE_CODE }, Keys.OFFICE_PK, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<EmployeeRecord, EmployeeRecord> EMPLOYEE__EMPLOYEE_EMPLOYEE_FK = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("employee_employee_fk"), new TableField[] { Employee.EMPLOYEE.REPORTS_TO }, Keys.EMPLOYEE_PK, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<EmployeeRecord, OfficeRecord> EMPLOYEE__EMPLOYEES_OFFICE_FK = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("employees_office_fk"), new TableField[] { Employee.EMPLOYEE.OFFICE_CODE }, Keys.OFFICE_PK, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<EmployeeStatusRecord, EmployeeRecord> EMPLOYEE_STATUS__EMPLOYEE_STATUS_EMPLOYEE_FK = Internal.createForeignKey(EmployeeStatus.EMPLOYEE_STATUS, DSL.name("employee_status_employee_fk"), new TableField[] { EmployeeStatus.EMPLOYEE_STATUS.EMPLOYEE_NUMBER }, Keys.EMPLOYEE_PK, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<OfficeHasManagerRecord, ManagerRecord> OFFICE_HAS_MANAGER__MANAGER_FK = Internal.createForeignKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("manager_fk"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID }, Keys.MANAGER_PK, new TableField[] { Manager.MANAGER.MANAGER_ID }, true);
    public static final ForeignKey<OfficeHasManagerRecord, OfficeRecord> OFFICE_HAS_MANAGER__OFFICE_FK = Internal.createForeignKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("office_fk"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE }, Keys.OFFICE_PK, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<OrderRecord, CustomerRecord> ORDER__ORDER_CUSTOMER_FK = Internal.createForeignKey(Order.ORDER, DSL.name("order_customer_fk"), new TableField[] { Order.ORDER.CUSTOMER_NUMBER }, Keys.CUSTOMER_PK, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<OrderdetailRecord, OrderRecord> ORDERDETAIL__ORDERDETAIL_ORDER_FK = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetail_order_fk"), new TableField[] { Orderdetail.ORDERDETAIL.ORDER_ID }, Keys.ORDER_PK, new TableField[] { Order.ORDER.ORDER_ID }, true);
    public static final ForeignKey<OrderdetailRecord, ProductRecord> ORDERDETAIL__ORDERDETAIL_PRODUCT_FK = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetail_product_fk"), new TableField[] { Orderdetail.ORDERDETAIL.PRODUCT_ID }, Keys.PRODUCT_PK, new TableField[] { Product.PRODUCT.PRODUCT_ID }, true);
    public static final ForeignKey<PaymentRecord, CustomerRecord> PAYMENT__PAYMENT_CUSTOMER_FK = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_customer_fk"), new TableField[] { Payment.PAYMENT.CUSTOMER_NUMBER }, Keys.CUSTOMER_PK, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<ProductRecord, ProductlineRecord> PRODUCT__PRODUCT_PRODUCTLINE_FK = Internal.createForeignKey(Product.PRODUCT, DSL.name("product_productline_fk"), new TableField[] { Product.PRODUCT.PRODUCT_LINE, Product.PRODUCT.CODE }, Keys.PRODUCTLINE_PK, new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE, Productline.PRODUCTLINE.CODE }, true);
    public static final ForeignKey<ProductlinedetailRecord, ProductlineRecord> PRODUCTLINEDETAIL__PRODUCTLINEDETAIL_FK = Internal.createForeignKey(Productlinedetail.PRODUCTLINEDETAIL, DSL.name("productlinedetail_fk"), new TableField[] { Productlinedetail.PRODUCTLINEDETAIL.PRODUCT_LINE, Productlinedetail.PRODUCTLINEDETAIL.CODE }, Keys.PRODUCTLINE_PK, new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE, Productline.PRODUCTLINE.CODE }, true);
    public static final ForeignKey<SaleRecord, EmployeeRecord> SALE__SALE_EMPLOYEE_FK = Internal.createForeignKey(Sale.SALE, DSL.name("sale_employee_fk"), new TableField[] { Sale.SALE.EMPLOYEE_NUMBER }, Keys.EMPLOYEE_PK, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<TokenRecord, SaleRecord> TOKEN__TOKEN_SALE_FK = Internal.createForeignKey(Token.TOKEN, DSL.name("token_sale_fk"), new TableField[] { Token.TOKEN.SALE_ID }, Keys.SALE_PK, new TableField[] { Sale.SALE.SALE_ID }, true);
    public static final ForeignKey<Top3productRecord, ProductRecord> TOP3PRODUCT__TOP3PRODUCT_PRODUCT_FK = Internal.createForeignKey(Top3product.TOP3PRODUCT, DSL.name("top3product_product_fk"), new TableField[] { Top3product.TOP3PRODUCT.PRODUCT_ID }, Keys.PRODUCT_PK, new TableField[] { Product.PRODUCT.PRODUCT_ID }, true);
}
