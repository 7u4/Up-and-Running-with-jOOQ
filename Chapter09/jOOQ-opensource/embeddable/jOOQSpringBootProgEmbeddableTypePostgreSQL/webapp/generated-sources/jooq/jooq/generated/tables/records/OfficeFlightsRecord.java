/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records;


import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import jooq.generated.tables.OfficeFlights;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfficeFlightsRecord extends UpdatableRecordImpl<OfficeFlightsRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.office_flights.depart_town</code>.
     */
    public void setDepartTown(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.office_flights.depart_town</code>.
     */
    @NotNull
    @Size(max = 32)
    public String getDepartTown() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.office_flights.arrival_town</code>.
     */
    public void setArrivalTown(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.office_flights.arrival_town</code>.
     */
    @NotNull
    @Size(max = 32)
    public String getArrivalTown() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.office_flights.distance_km</code>.
     */
    public void setDistanceKm(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.office_flights.distance_km</code>.
     */
    @NotNull
    public Integer getDistanceKm() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return OfficeFlights.OFFICE_FLIGHTS.DEPART_TOWN;
    }

    @Override
    public Field<String> field2() {
        return OfficeFlights.OFFICE_FLIGHTS.ARRIVAL_TOWN;
    }

    @Override
    public Field<Integer> field3() {
        return OfficeFlights.OFFICE_FLIGHTS.DISTANCE_KM;
    }

    @Override
    public String component1() {
        return getDepartTown();
    }

    @Override
    public String component2() {
        return getArrivalTown();
    }

    @Override
    public Integer component3() {
        return getDistanceKm();
    }

    @Override
    public String value1() {
        return getDepartTown();
    }

    @Override
    public String value2() {
        return getArrivalTown();
    }

    @Override
    public Integer value3() {
        return getDistanceKm();
    }

    @Override
    public OfficeFlightsRecord value1(String value) {
        setDepartTown(value);
        return this;
    }

    @Override
    public OfficeFlightsRecord value2(String value) {
        setArrivalTown(value);
        return this;
    }

    @Override
    public OfficeFlightsRecord value3(Integer value) {
        setDistanceKm(value);
        return this;
    }

    @Override
    public OfficeFlightsRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OfficeFlightsRecord
     */
    public OfficeFlightsRecord() {
        super(OfficeFlights.OFFICE_FLIGHTS);
    }

    /**
     * Create a detached, initialised OfficeFlightsRecord
     */
    public OfficeFlightsRecord(String departTown, String arrivalTown, Integer distanceKm) {
        super(OfficeFlights.OFFICE_FLIGHTS);

        setDepartTown(departTown);
        setArrivalTown(arrivalTown);
        setDistanceKm(distanceKm);
    }
}
