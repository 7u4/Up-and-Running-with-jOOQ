/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import javax.annotation.processing.Generated;

import jooq.generated.Public;
import jooq.generated.tables.records.ProductOfProductLineRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductOfProductLine extends TableImpl<ProductOfProductLineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_of_product_line</code>
     */
    public static final ProductOfProductLine PRODUCT_OF_PRODUCT_LINE = new ProductOfProductLine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductOfProductLineRecord> getRecordType() {
        return ProductOfProductLineRecord.class;
    }

    /**
     * The column <code>public.product_of_product_line.p_id</code>.
     */
    public final TableField<ProductOfProductLineRecord, Long> P_ID = createField(DSL.name("p_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.product_of_product_line.p_name</code>.
     */
    public final TableField<ProductOfProductLineRecord, String> P_NAME = createField(DSL.name("p_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.product_of_product_line.p_line</code>.
     */
    public final TableField<ProductOfProductLineRecord, String> P_LINE = createField(DSL.name("p_line"), SQLDataType.VARCHAR, this, "");

    private ProductOfProductLine(Name alias, Table<ProductOfProductLineRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private ProductOfProductLine(Name alias, Table<ProductOfProductLineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.product_of_product_line</code> table reference
     */
    public ProductOfProductLine(String alias) {
        this(DSL.name(alias), PRODUCT_OF_PRODUCT_LINE);
    }

    /**
     * Create an aliased <code>public.product_of_product_line</code> table reference
     */
    public ProductOfProductLine(Name alias) {
        this(alias, PRODUCT_OF_PRODUCT_LINE);
    }

    /**
     * Create a <code>public.product_of_product_line</code> table reference
     */
    public ProductOfProductLine() {
        this(DSL.name("product_of_product_line"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ProductOfProductLine as(String alias) {
        return new ProductOfProductLine(DSL.name(alias), this, parameters);
    }

    @Override
    public ProductOfProductLine as(Name alias) {
        return new ProductOfProductLine(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOfProductLine rename(String name) {
        return new ProductOfProductLine(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOfProductLine rename(Name name) {
        return new ProductOfProductLine(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public ProductOfProductLine call(
          String pLineIn
    ) {
        ProductOfProductLine result = new ProductOfProductLine(DSL.name("product_of_product_line"), null, new Field[] {
              DSL.val(pLineIn, SQLDataType.VARCHAR)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public ProductOfProductLine call(
          Field<String> pLineIn
    ) {
        ProductOfProductLine result = new ProductOfProductLine(DSL.name("product_of_product_line"), null, new Field[] {
              pLineIn
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
