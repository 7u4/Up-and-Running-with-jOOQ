/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.tables.BankTransaction;
import jooq.generated.tables.pojos.JooqBankTransaction;
import jooq.generated.tables.records.BankTransactionRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class BankTransactionRepository extends DAOImpl<BankTransactionRecord, JooqBankTransaction, Integer> {

    /**
     * Create a new BankTransactionRepository without any configuration
     */
    public BankTransactionRepository() {
        super(BankTransaction.BANK_TRANSACTION, JooqBankTransaction.class);
    }

    /**
     * Create a new BankTransactionRepository with an attached configuration
     */
    @Autowired
    public BankTransactionRepository(Configuration configuration) {
        super(BankTransaction.BANK_TRANSACTION, JooqBankTransaction.class, configuration);
    }

    @Override
    public Integer getId(JooqBankTransaction object) {
        return object.getTransactionId();
    }

    /**
     * Fetch records that have <code>transaction_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqBankTransaction> fetchRangeOfTransactionId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(BankTransaction.BANK_TRANSACTION.TRANSACTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>transaction_id IN (values)</code>
     */
    public List<JooqBankTransaction> fetchByTransactionId(Integer... values) {
        return fetch(BankTransaction.BANK_TRANSACTION.TRANSACTION_ID, values);
    }

    /**
     * Fetch a unique record that has <code>transaction_id = value</code>
     */
    public JooqBankTransaction fetchOneByTransactionId(Integer value) {
        return fetchOne(BankTransaction.BANK_TRANSACTION.TRANSACTION_ID, value);
    }

    /**
     * Fetch records that have <code>bank_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqBankTransaction> fetchRangeOfBankName(String lowerInclusive, String upperInclusive) {
        return fetchRange(BankTransaction.BANK_TRANSACTION.BANK_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bank_name IN (values)</code>
     */
    public List<JooqBankTransaction> fetchByBankName(String... values) {
        return fetch(BankTransaction.BANK_TRANSACTION.BANK_NAME, values);
    }

    /**
     * Fetch records that have <code>bank_iban BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqBankTransaction> fetchRangeOfBankIban(String lowerInclusive, String upperInclusive) {
        return fetchRange(BankTransaction.BANK_TRANSACTION.BANK_IBAN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bank_iban IN (values)</code>
     */
    public List<JooqBankTransaction> fetchByBankIban(String... values) {
        return fetch(BankTransaction.BANK_TRANSACTION.BANK_IBAN, values);
    }

    /**
     * Fetch records that have <code>transfer_amount BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqBankTransaction> fetchRangeOfTransferAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(BankTransaction.BANK_TRANSACTION.TRANSFER_AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>transfer_amount IN (values)</code>
     */
    public List<JooqBankTransaction> fetchByTransferAmount(BigDecimal... values) {
        return fetch(BankTransaction.BANK_TRANSACTION.TRANSFER_AMOUNT, values);
    }

    /**
     * Fetch records that have <code>caching_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqBankTransaction> fetchRangeOfCachingDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(BankTransaction.BANK_TRANSACTION.CACHING_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>caching_date IN (values)</code>
     */
    public List<JooqBankTransaction> fetchByCachingDate(LocalDateTime... values) {
        return fetch(BankTransaction.BANK_TRANSACTION.CACHING_DATE, values);
    }

    /**
     * Fetch records that have <code>customer_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqBankTransaction> fetchRangeOfCustomerNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BankTransaction.BANK_TRANSACTION.CUSTOMER_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customer_number IN (values)</code>
     */
    public List<JooqBankTransaction> fetchByCustomerNumber(Long... values) {
        return fetch(BankTransaction.BANK_TRANSACTION.CUSTOMER_NUMBER, values);
    }

    /**
     * Fetch records that have <code>check_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JooqBankTransaction> fetchRangeOfCheckNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(BankTransaction.BANK_TRANSACTION.CHECK_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>check_number IN (values)</code>
     */
    public List<JooqBankTransaction> fetchByCheckNumber(String... values) {
        return fetch(BankTransaction.BANK_TRANSACTION.CHECK_NUMBER, values);
    }
}
