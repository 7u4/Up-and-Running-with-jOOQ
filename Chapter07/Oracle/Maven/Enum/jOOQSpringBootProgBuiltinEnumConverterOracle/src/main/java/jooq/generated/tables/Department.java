/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.Keys;
import jooq.generated.System;
import jooq.generated.tables.records.DepartmentRecord;
import jooq.generated.udt.records.TopicarrRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:1.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Department extends TableImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SYSTEM.DEPARTMENT</code>
     */
    public static final Department DEPARTMENT = new Department();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRecord> getRecordType() {
        return DepartmentRecord.class;
    }

    /**
     * The column <code>SYSTEM.DEPARTMENT.DEPARTMENT_ID</code>.
     */
    public final TableField<DepartmentRecord, Long> DEPARTMENT_ID = createField(DSL.name("DEPARTMENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SYSTEM.DEPARTMENT.NAME</code>.
     */
    public final TableField<DepartmentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>SYSTEM.DEPARTMENT.PHONE</code>.
     */
    public final TableField<DepartmentRecord, String> PHONE = createField(DSL.name("PHONE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>SYSTEM.DEPARTMENT.CODE</code>.
     */
    public final TableField<DepartmentRecord, Integer> CODE = createField(DSL.name("CODE"), SQLDataType.INTEGER.defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>SYSTEM.DEPARTMENT.OFFICE_CODE</code>.
     */
    public final TableField<DepartmentRecord, String> OFFICE_CODE = createField(DSL.name("OFFICE_CODE"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>SYSTEM.DEPARTMENT.TOPIC</code>.
     */
    public final TableField<DepartmentRecord, TopicarrRecord> TOPIC = createField(DSL.name("TOPIC"), SQLDataType.VARCHAR(100).asArrayDataType(jooq.generated.udt.records.TopicarrRecord.class), this, "");

    /**
     * The column <code>SYSTEM.DEPARTMENT.DEP_NET_IPV4</code>.
     */
    public final TableField<DepartmentRecord, String> DEP_NET_IPV4 = createField(DSL.name("DEP_NET_IPV4"), SQLDataType.VARCHAR(16).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private Department(Name alias, Table<DepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Department(Name alias, Table<DepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SYSTEM.DEPARTMENT</code> table reference
     */
    public Department(String alias) {
        this(DSL.name(alias), DEPARTMENT);
    }

    /**
     * Create an aliased <code>SYSTEM.DEPARTMENT</code> table reference
     */
    public Department(Name alias) {
        this(alias, DEPARTMENT);
    }

    /**
     * Create a <code>SYSTEM.DEPARTMENT</code> table reference
     */
    public Department() {
        this(DSL.name("DEPARTMENT"), null);
    }

    public <O extends Record> Department(Table<O> child, ForeignKey<O, DepartmentRecord> key) {
        super(child, key, DEPARTMENT);
    }

    @Override
    public Schema getSchema() {
        return System.SYSTEM;
    }

    @Override
    public UniqueKey<DepartmentRecord> getPrimaryKey() {
        return Keys.SYS_C0013857;
    }

    @Override
    public List<UniqueKey<DepartmentRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartmentRecord>>asList(Keys.SYS_C0013857);
    }

    @Override
    public List<ForeignKey<DepartmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DepartmentRecord, ?>>asList(Keys.DEPARTMENT_IBFK_1);
    }

    public Office office() {
        return new Office(this, Keys.DEPARTMENT_IBFK_1);
    }

    @Override
    public Department as(String alias) {
        return new Department(DSL.name(alias), this);
    }

    @Override
    public Department as(Name alias) {
        return new Department(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(String name) {
        return new Department(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Name name) {
        return new Department(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, Integer, String, TopicarrRecord, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
