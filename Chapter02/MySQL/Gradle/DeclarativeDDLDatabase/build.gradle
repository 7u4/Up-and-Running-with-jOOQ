plugins {
    id 'application'
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.flywaydb.flyway' version '8.2.0'
    id 'nu.studer.jooq' version '6.0.1'
    id 'java'
}

def schemaVersion = '1'

group = 'com.classicmodels'
version = '1.0'
sourceCompatibility = '17'
targetCompatibility = '17'

application {
    mainClass = 'com.classicmodels.MainApplication' 
}

repositories {
    mavenLocal()
    mavenCentral()   
}

dependencies {            
    jooqGenerator 'mysql:mysql-connector-java' 
    jooqGenerator 'org.jooq:jooq-meta-extensions:3.15.5'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'mysql:mysql-connector-java'
    implementation 'org.flywaydb:flyway-core'               
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

processResources {
    filesMatching("**/application.properties") {
        expand( project.properties )
    }
}

configurations {
    flywayMigrate
}

flywayMigrate {
    driver = project.properties['driverClassName']
    url = project.properties['url']
    user = project.properties['username']
    password = project.properties['password']    
    locations = ['filesystem:./../../../../db/migration/ddl/mysql/sql',
                 'filesystem:./../../../../db/migration/ddl/mysql/data']	
}

jooq {
    version = '3.15.5'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        main {
            generateSchemaSourceOnCompilation = true  // default (can be omitted)                        
                    
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                
                generator {
                    name = 'org.jooq.codegen.JavaGenerator' 
                    
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase' 
                        
                        properties {

                            // Specify the location of your SQL script.
                            // You may use ant-style file matching, e.g. /path/**/to/*.sql
                            // 
                            // Where:
                            // - ** matches any directory subtree
                            // - * matches any number of characters in a directory / file name
                            // - ? matches a single character in a directory / file name
                            property {
                                key = 'scripts'
                                value = './../../../../db/migration/ddl/mysql/sql'								
                            }

                            // The sort order of the scripts within a directory, where:
                            // 
                            // - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
                            // - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
                            // - flyway: sorts files the same way as flyway does
                            // - none: doesn't sort directory contents after fetching them from the directory
                            property {
                                key = 'sort'
                                value = 'semantic'
                            }

                            // The default schema for unqualified objects:
                            // 
                            // - public: all unqualified objects are located in the PUBLIC (upper case) schema
                            // - none: all unqualified objects are located in the default schema (default) 
                            // 
                            // This configuration can be overridden with the schema mapping feature
                            property {
                                key = 'unqualifiedSchema'
                                value = 'none'
                            }

                            // The default name case for unquoted objects:
                            // 
                            // - as_is: unquoted object names are kept unquoted
                            // - upper: unquoted object names are turned into upper case (most databases)
                            // - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
                            property {
                                key = 'defaultNameCase'
                                value = 'as_is'
                            }
                        }
                        
                        inputSchema = 'PUBLIC'
                        schemaVersionProvider=schemaVersion                        
                        excludes = '''\
                                    flyway_schema_history | sequences 
                                  | customer_pgs | refresh_top3_product
                                  | sale_.* | set_.* | get_.* | .*_master
                                  ''' 
                        logSlowQueriesAfterSeconds = 20
                    }                                        
                    
                    strategy {
                        matchers {
                            tables {
                                table {
                                    pojoClass{
                                        expression = 'JOOQ_$0'
                                        transform = 'PASCAL'
                                    }
                                    daoClass{
                                        expression = '$0_Repository'
                                        transform = 'PASCAL'
                                    }
                                }
                            }
                        }
                    }                                        
                    
                    generate {  
                        daos = true
                        validationAnnotations = true
                        springAnnotations = true
                    }
                    
                    target {
                        packageName = 'jooq.generated'
                        directory = 'build/generated-sources'
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('${rootDir}/../../../../db/migration/ddl/mysql/sql'))
    .withPropertyName('migrations')
    .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}
