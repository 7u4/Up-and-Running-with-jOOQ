plugins {
    id 'application'
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.flywaydb.flyway' version '8.2.0'
    id 'nu.studer.jooq' version '6.0.1'
    id 'java'
}

group = 'com.classicmodels'
version = '1.0'
sourceCompatibility = '17'
targetCompatibility = '17'

application {
    mainClass = 'com.classicmodels.MainApplication' 
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {        
    jooqGenerator 'com.oracle.database.jdbc:ojdbc8'
    jooqGenerator 'com.oracle.database.jdbc:ucp'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.oracle.database.jdbc:ojdbc8'
    implementation 'com.oracle.database.jdbc:ucp'
    implementation 'org.flywaydb:flyway-core'
}

processResources {
    filesMatching("**/application.properties") {
        expand( project.properties )
    }
}

flyway {
    driver = project.properties['driverClassName']
    url = project.properties['url']
    user = project.properties['username']
    password = project.properties['password']
    locations = ['filesystem:./../../../../../db/migration/dev/oracle']
    baselineOnMigrate=true
}

jooq {
    version = project.properties['jooq']
    edition = nu.studer.gradle.jooq.JooqEdition.TRIAL_JAVA_8

    configurations {
        main {
            generateSchemaSourceOnCompilation = true  // default (can be omitted)
            
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = project.properties['driverClassName']
                    url = project.properties['url']
                    user = project.properties['username']
                    password = project.properties['password']                    
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'                    
                    database {
                        name = 'org.jooq.meta.oracle.OracleDatabase'                        
                        inputSchema = 'CLASSICMODELS'
                        includes = '.*'
                        schemaVersionProvider = 'SELECT MAX("version") FROM "flyway_schema_history"'
                        excludes = '''\
                                    flyway_schema_history | DEPARTMENT_PKG | GET_.*
                                  | CARD_COMMISSION | PRODUCT_OF_PRODUCT_LINE  
                                  | REFRESH_TOP3_PRODUCT | SALE_PRICE | SECOND_MAX
                                  | SET_COUNTER | SWAP | TOP_THREE_SALES_PER_EMPLOYEE
                                  | EVALUATION_CRITERIA | SECOND_MAX_IMPL | TABLE_.*_OBJ
                                  | .*_MASTER | BGT | .*_ARR | TABLE_POPL | TABLE_RES
                                  ''' 
                        logSlowQueriesAfterSeconds = 20
                    }
                    strategy {
                        matchers {
                            tables {
                                table {
                                    pojoClass{
                                        expression = 'JOOQ_$0'
                                        transform = 'PASCAL'
                                    }
                                    daoClass{
                                        expression = '$0_Repository'
                                        transform = 'PASCAL'
                                    }
                                }
                            }
                        }
                    }
                    
                    generate {  
                        daos = true
                        validationAnnotations = true
                        springAnnotations = true
                    }                    
                    target {
                        packageName = 'jooq.generated'
                        directory = 'build/generated-sources'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}

// Configure jOOQ task such that it only executes when something has changed 
// that potentially affects the generated JOOQ sources:
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed 
//   (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is 
//   used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('${rootDir}/../../../../../db/migration/dev/oracle'))
        .withPropertyName('migrations')
        .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}
