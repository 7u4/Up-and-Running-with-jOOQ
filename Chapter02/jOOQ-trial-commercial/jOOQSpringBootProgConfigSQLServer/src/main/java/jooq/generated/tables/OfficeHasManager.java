/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.System;
import jooq.generated.tables.records.OfficeHasManagerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5",
        "schema version:1.1"
    },
    date = "2020-10-19T14:04:39.558Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OfficeHasManager extends TableImpl<OfficeHasManagerRecord> {

    private static final long serialVersionUID = 122355287;

    /**
     * The reference instance of <code>SYSTEM.OFFICE_HAS_MANAGER</code>
     */
    public static final OfficeHasManager OFFICE_HAS_MANAGER = new OfficeHasManager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficeHasManagerRecord> getRecordType() {
        return OfficeHasManagerRecord.class;
    }

    /**
     * The column <code>SYSTEM.OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE</code>.
     */
    public final TableField<OfficeHasManagerRecord, String> OFFICES_OFFICE_CODE = createField(DSL.name("OFFICES_OFFICE_CODE"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>SYSTEM.OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID</code>.
     */
    public final TableField<OfficeHasManagerRecord, Long> MANAGERS_MANAGER_ID = createField(DSL.name("MANAGERS_MANAGER_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>SYSTEM.OFFICE_HAS_MANAGER</code> table reference
     */
    public OfficeHasManager() {
        this(DSL.name("OFFICE_HAS_MANAGER"), null);
    }

    /**
     * Create an aliased <code>SYSTEM.OFFICE_HAS_MANAGER</code> table reference
     */
    public OfficeHasManager(String alias) {
        this(DSL.name(alias), OFFICE_HAS_MANAGER);
    }

    /**
     * Create an aliased <code>SYSTEM.OFFICE_HAS_MANAGER</code> table reference
     */
    public OfficeHasManager(Name alias) {
        this(alias, OFFICE_HAS_MANAGER);
    }

    private OfficeHasManager(Name alias, Table<OfficeHasManagerRecord> aliased) {
        this(alias, aliased, null);
    }

    private OfficeHasManager(Name alias, Table<OfficeHasManagerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OfficeHasManager(Table<O> child, ForeignKey<O, OfficeHasManagerRecord> key) {
        super(child, key, OFFICE_HAS_MANAGER);
    }

    @Override
    public Schema getSchema() {
        return System.SYSTEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_OFFICES_HAS_MANAGERS_ID);
    }

    @Override
    public UniqueKey<OfficeHasManagerRecord> getPrimaryKey() {
        return Keys.OFFICES_MANAGERS_PKEY;
    }

    @Override
    public List<UniqueKey<OfficeHasManagerRecord>> getKeys() {
        return Arrays.<UniqueKey<OfficeHasManagerRecord>>asList(Keys.OFFICES_MANAGERS_PKEY);
    }

    @Override
    public List<ForeignKey<OfficeHasManagerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OfficeHasManagerRecord, ?>>asList(Keys.SYS_C0011272, Keys.SYS_C0011273);
    }

    public Office office() {
        return new Office(this, Keys.SYS_C0011272);
    }

    public Manager manager() {
        return new Manager(this, Keys.SYS_C0011273);
    }

    @Override
    public OfficeHasManager as(String alias) {
        return new OfficeHasManager(DSL.name(alias), this);
    }

    @Override
    public OfficeHasManager as(Name alias) {
        return new OfficeHasManager(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OfficeHasManager rename(String name) {
        return new OfficeHasManager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OfficeHasManager rename(Name name) {
        return new OfficeHasManager(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
