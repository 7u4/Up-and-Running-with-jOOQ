/*
 * This file is generated by jOOQ.
 */
package jooq.generated;


import jooq.generated.tables.Customer;
import jooq.generated.tables.Customerdetail;
import jooq.generated.tables.Department;
import jooq.generated.tables.Employee;
import jooq.generated.tables.Manager;
import jooq.generated.tables.Office;
import jooq.generated.tables.OfficeHasManager;
import jooq.generated.tables.Order;
import jooq.generated.tables.Orderdetail;
import jooq.generated.tables.Payment;
import jooq.generated.tables.Product;
import jooq.generated.tables.Productline;
import jooq.generated.tables.Sale;
import jooq.generated.tables.records.CustomerRecord;
import jooq.generated.tables.records.CustomerdetailRecord;
import jooq.generated.tables.records.DepartmentRecord;
import jooq.generated.tables.records.EmployeeRecord;
import jooq.generated.tables.records.ManagerRecord;
import jooq.generated.tables.records.OfficeHasManagerRecord;
import jooq.generated.tables.records.OfficeRecord;
import jooq.generated.tables.records.OrderRecord;
import jooq.generated.tables.records.OrderdetailRecord;
import jooq.generated.tables.records.PaymentRecord;
import jooq.generated.tables.records.ProductRecord;
import jooq.generated.tables.records.ProductlineRecord;
import jooq.generated.tables.records.SaleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CustomerRecord> CONSTRAINT_5 = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("CONSTRAINT_5"), new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final UniqueKey<CustomerdetailRecord> CONSTRAINT_C = Internal.createUniqueKey(Customerdetail.CUSTOMERDETAIL, DSL.name("CONSTRAINT_C"), new TableField[] { Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER }, true);
    public static final UniqueKey<DepartmentRecord> CONSTRAINT_4 = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("CONSTRAINT_4"), new TableField[] { Department.DEPARTMENT.DEPARTMENT_ID }, true);
    public static final UniqueKey<EmployeeRecord> CONSTRAINT_7 = Internal.createUniqueKey(Employee.EMPLOYEE, DSL.name("CONSTRAINT_7"), new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final UniqueKey<ManagerRecord> CONSTRAINT_5C = Internal.createUniqueKey(Manager.MANAGER, DSL.name("CONSTRAINT_5C"), new TableField[] { Manager.MANAGER.MANAGER_ID }, true);
    public static final UniqueKey<OfficeRecord> CONSTRAINT_8 = Internal.createUniqueKey(Office.OFFICE, DSL.name("CONSTRAINT_8"), new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final UniqueKey<OfficeHasManagerRecord> OFFICES_MANAGERS_PKEY = Internal.createUniqueKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("OFFICES_MANAGERS_PKEY"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE, OfficeHasManager.OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID }, true);
    public static final UniqueKey<OrderRecord> CONSTRAINT_47 = Internal.createUniqueKey(Order.ORDER, DSL.name("CONSTRAINT_47"), new TableField[] { Order.ORDER.ORDER_ID }, true);
    public static final UniqueKey<OrderdetailRecord> CONSTRAINT_F = Internal.createUniqueKey(Orderdetail.ORDERDETAIL, DSL.name("CONSTRAINT_F"), new TableField[] { Orderdetail.ORDERDETAIL.ORDER_ID, Orderdetail.ORDERDETAIL.PRODUCT_ID }, true);
    public static final UniqueKey<PaymentRecord> CONSTRAINT_FB = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("CONSTRAINT_FB"), new TableField[] { Payment.PAYMENT.CUSTOMER_NUMBER, Payment.PAYMENT.CHECK_NUMBER }, true);
    public static final UniqueKey<ProductRecord> CONSTRAINT_1 = Internal.createUniqueKey(Product.PRODUCT, DSL.name("CONSTRAINT_1"), new TableField[] { Product.PRODUCT.PRODUCT_ID }, true);
    public static final UniqueKey<ProductlineRecord> CONSTRAINT_27 = Internal.createUniqueKey(Productline.PRODUCTLINE, DSL.name("CONSTRAINT_27"), new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE }, true);
    public static final UniqueKey<SaleRecord> CONSTRAINT_2 = Internal.createUniqueKey(Sale.SALE, DSL.name("CONSTRAINT_2"), new TableField[] { Sale.SALE.SALE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CustomerRecord, EmployeeRecord> CUSTOMERS_IBFK_1 = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("CUSTOMERS_IBFK_1"), new TableField[] { Customer.CUSTOMER.SALES_REP_EMPLOYEE_NUMBER }, Keys.CONSTRAINT_7, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<CustomerdetailRecord, CustomerRecord> CUSTOMERS_DETAILS_IBFK_1 = Internal.createForeignKey(Customerdetail.CUSTOMERDETAIL, DSL.name("CUSTOMERS_DETAILS_IBFK_1"), new TableField[] { Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER }, Keys.CONSTRAINT_5, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<DepartmentRecord, OfficeRecord> DEPARTMENT_IBFK_1 = Internal.createForeignKey(Department.DEPARTMENT, DSL.name("DEPARTMENT_IBFK_1"), new TableField[] { Department.DEPARTMENT.OFFICE_CODE }, Keys.CONSTRAINT_8, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<EmployeeRecord, EmployeeRecord> EMPLOYEES_IBFK_1 = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("EMPLOYEES_IBFK_1"), new TableField[] { Employee.EMPLOYEE.REPORTS_TO }, Keys.CONSTRAINT_7, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
    public static final ForeignKey<EmployeeRecord, OfficeRecord> EMPLOYEES_IBFK_2 = Internal.createForeignKey(Employee.EMPLOYEE, DSL.name("EMPLOYEES_IBFK_2"), new TableField[] { Employee.EMPLOYEE.OFFICE_CODE }, Keys.CONSTRAINT_8, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<OfficeHasManagerRecord, OfficeRecord> CONSTRAINT_28 = Internal.createForeignKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("CONSTRAINT_28"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE }, Keys.CONSTRAINT_8, new TableField[] { Office.OFFICE.OFFICE_CODE }, true);
    public static final ForeignKey<OfficeHasManagerRecord, ManagerRecord> CONSTRAINT_288 = Internal.createForeignKey(OfficeHasManager.OFFICE_HAS_MANAGER, DSL.name("CONSTRAINT_288"), new TableField[] { OfficeHasManager.OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID }, Keys.CONSTRAINT_5C, new TableField[] { Manager.MANAGER.MANAGER_ID }, true);
    public static final ForeignKey<OrderRecord, CustomerRecord> ORDERS_IBFK_1 = Internal.createForeignKey(Order.ORDER, DSL.name("ORDERS_IBFK_1"), new TableField[] { Order.ORDER.CUSTOMER_NUMBER }, Keys.CONSTRAINT_5, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<OrderdetailRecord, OrderRecord> ORDERDETAILS_IBFK_1 = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("ORDERDETAILS_IBFK_1"), new TableField[] { Orderdetail.ORDERDETAIL.ORDER_ID }, Keys.CONSTRAINT_47, new TableField[] { Order.ORDER.ORDER_ID }, true);
    public static final ForeignKey<OrderdetailRecord, ProductRecord> ORDERDETAILS_IBFK_2 = Internal.createForeignKey(Orderdetail.ORDERDETAIL, DSL.name("ORDERDETAILS_IBFK_2"), new TableField[] { Orderdetail.ORDERDETAIL.PRODUCT_ID }, Keys.CONSTRAINT_1, new TableField[] { Product.PRODUCT.PRODUCT_ID }, true);
    public static final ForeignKey<PaymentRecord, CustomerRecord> PAYMENTS_IBFK_1 = Internal.createForeignKey(Payment.PAYMENT, DSL.name("PAYMENTS_IBFK_1"), new TableField[] { Payment.PAYMENT.CUSTOMER_NUMBER }, Keys.CONSTRAINT_5, new TableField[] { Customer.CUSTOMER.CUSTOMER_NUMBER }, true);
    public static final ForeignKey<ProductRecord, ProductlineRecord> PRODUCTS_IBFK_1 = Internal.createForeignKey(Product.PRODUCT, DSL.name("PRODUCTS_IBFK_1"), new TableField[] { Product.PRODUCT.PRODUCT_LINE }, Keys.CONSTRAINT_27, new TableField[] { Productline.PRODUCTLINE.PRODUCT_LINE }, true);
    public static final ForeignKey<SaleRecord, EmployeeRecord> SALES_IBFK_1 = Internal.createForeignKey(Sale.SALE, DSL.name("SALES_IBFK_1"), new TableField[] { Sale.SALE.EMPLOYEE_NUMBER }, Keys.CONSTRAINT_7, new TableField[] { Employee.EMPLOYEE.EMPLOYEE_NUMBER }, true);
}
