/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import jooq.generated.DefaultSchema;
import jooq.generated.Indexes;
import jooq.generated.Keys;
import jooq.generated.tables.records.OrderRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ORDER</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>ORDER.ORDER_ID</code>.
     */
    public final TableField<OrderRecord, Long> ORDER_ID = createField(DSL.name("ORDER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ORDER.ORDER_DATE</code>.
     */
    public final TableField<OrderRecord, LocalDate> ORDER_DATE = createField(DSL.name("ORDER_DATE"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>ORDER.REQUIRED_DATE</code>.
     */
    public final TableField<OrderRecord, LocalDate> REQUIRED_DATE = createField(DSL.name("REQUIRED_DATE"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>ORDER.SHIPPED_DATE</code>.
     */
    public final TableField<OrderRecord, LocalDate> SHIPPED_DATE = createField(DSL.name("SHIPPED_DATE"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>ORDER.STATUS</code>.
     */
    public final TableField<OrderRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>ORDER.COMMENTS</code>.
     */
    public final TableField<OrderRecord, String> COMMENTS = createField(DSL.name("COMMENTS"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ORDER.CUSTOMER_NUMBER</code>.
     */
    public final TableField<OrderRecord, Long> CUSTOMER_NUMBER = createField(DSL.name("CUSTOMER_NUMBER"), SQLDataType.BIGINT.nullable(false), this, "");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ORDER</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>ORDER</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>ORDER</code> table reference
     */
    public Order() {
        this(DSL.name("ORDER"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMER_NUMBER);
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_47;
    }

    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.CONSTRAINT_47);
    }

    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderRecord, ?>>asList(Keys.ORDERS_IBFK_1);
    }

    public Customer customer() {
        return new Customer(this, Keys.ORDERS_IBFK_1);
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDate, LocalDate, LocalDate, String, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
