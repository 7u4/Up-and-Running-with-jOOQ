/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos;


import java.util.List;

import javax.annotation.processing.Generated;

import jooq.generated.tables.Employee;
import jooq.generated.tables.records.EmployeeRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:1.1"
    },
    date = "2020-07-04T08:58:29.902Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class EmployeeRepository extends DAOImpl<EmployeeRecord, jooq.generated.tables.pojos.Employee, Long> {

    /**
     * Create a new EmployeeRepository without any configuration
     */
    public EmployeeRepository() {
        super(Employee.EMPLOYEE, jooq.generated.tables.pojos.Employee.class);
    }

    /**
     * Create a new EmployeeRepository with an attached configuration
     */
    @Autowired
    public EmployeeRepository(Configuration configuration) {
        super(Employee.EMPLOYEE, jooq.generated.tables.pojos.Employee.class, configuration);
    }

    @Override
    public Long getId(jooq.generated.tables.pojos.Employee object) {
        return object.getEmployeeNumber();
    }

    /**
     * Fetch records that have <code>employee_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfEmployeeNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EMPLOYEE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>employee_number IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByEmployeeNumber(Long... values) {
        return fetch(Employee.EMPLOYEE.EMPLOYEE_NUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>employee_number = value</code>
     */
    public jooq.generated.tables.pojos.Employee fetchOneByEmployeeNumber(Long value) {
        return fetchOne(Employee.EMPLOYEE.EMPLOYEE_NUMBER, value);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByLastName(String... values) {
        return fetch(Employee.EMPLOYEE.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByFirstName(String... values) {
        return fetch(Employee.EMPLOYEE.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>extension BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfExtension(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EXTENSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>extension IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByExtension(String... values) {
        return fetch(Employee.EMPLOYEE.EXTENSION, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByEmail(String... values) {
        return fetch(Employee.EMPLOYEE.EMAIL, values);
    }

    /**
     * Fetch records that have <code>office_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfOfficeCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.OFFICE_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>office_code IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByOfficeCode(String... values) {
        return fetch(Employee.EMPLOYEE.OFFICE_CODE, values);
    }

    /**
     * Fetch records that have <code>reports_to BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfReportsTo(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.REPORTS_TO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>reports_to IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByReportsTo(Long... values) {
        return fetch(Employee.EMPLOYEE.REPORTS_TO, values);
    }

    /**
     * Fetch records that have <code>job_title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchRangeOfJobTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.JOB_TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>job_title IN (values)</code>
     */
    public List<jooq.generated.tables.pojos.Employee> fetchByJobTitle(String... values) {
        return fetch(Employee.EMPLOYEE.JOB_TITLE, values);
    }
}
