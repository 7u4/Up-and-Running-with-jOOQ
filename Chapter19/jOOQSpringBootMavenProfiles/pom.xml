<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.app</groupId>
    <artifactId>jOOQSpringBootMavenProfiles</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>

    <name>jOOQSpringBootMavenProfiles</name>
    <description>jOOQ - Spring Boot app</description>    

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        
        <java.version>14</java.version>                
        <maven.compiler.source>14</maven.compiler.source>
        <maven.compiler.target>14</maven.compiler.target>
        
        <jooq.version>3.15.2</jooq.version>  
        <mysql.connector.java.version>8.0.20</mysql.connector.java.version>                
        <codehaus.mojo.version>1.0.0</codehaus.mojo.version>                
        <hibernate.validator.version>5.2.4.Final</hibernate.validator.version>        
        <maven.compiler.plugin.version>3.3</maven.compiler.plugin.version>  
    </properties>

    <dependencies>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity5</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>         
            <version>${jooq.version}</version>
        </dependency>                    
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>          
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate.validator.version}</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>   
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>                             
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>mysql</id>
            <properties>
                <activatedProperties>mysql</activatedProperties>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>                        
        </profile>
        <profile>
            <id>postgresql</id>
            <properties>
                <activatedProperties>postgresql</activatedProperties>
            </properties>      
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>                                          
        </profile>        
    </profiles>
    
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources> 
        
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>                
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <compilerArgs>
                        <arg>--enable-preview</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>${codehaus.mojo.version}</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>                                
                                <file>src/main/resources/application-${activatedProperties}.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>               
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>                 
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>                           
                        </goals>
                    </execution>
                </executions>                
                <configuration>                 
                    <url>${spring.datasource.url}</url>
                    <user>${spring.datasource.username}</user>
                    <password>${spring.datasource.password}</password>  
                    <locations>
                        <location>filesystem:src/main/resources/db/migration/${spring.flyway.location}</location>                        
                    </locations>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>                               
                <executions>
                    <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>   
                <configuration>                                                 
                    <!-- Configure the database connection here -->
                    <jdbc>
                        <driver>${spring.datasource.driverClassName}</driver>
                        <url>${spring.datasource.url}</url>
                        <user>${spring.datasource.username}</user>
                        <password>${spring.datasource.password}</password>                                              
                    </jdbc>                                        

                    <generator>
                        <!-- The default code generator. You can override this one, to generate your own code style.
                        Supported generators:
                        - org.jooq.codegen.JavaGenerator
                        - org.jooq.codegen.ScalaGenerator
                        Defaults to org.jooq.codegen.JavaGenerator -->
                        <name>org.jooq.codegen.JavaGenerator</name>
        
                        <database>                                                                                   
                            <!-- The database type. The format here is:
                            org.jooq.meta.[database].[database]Database -->
                            <name>${spring.jooq.with-name}</name>
            
                            <!-- The database catalog/schema (or in the absence of schema support, in your RDBMS this
                            can be the owner, user, database name) to be generated -->                            
                            <inputSchema>${spring.jooq.with-input-schema}</inputSchema>                 
            
                            <!-- All elements that are generated from your schema
                            (A Java regular expression. Use the pipe to separate several expressions)
                            Watch out for case-sensitivity. Depending on your database, this might be important! -->       
                            <includes>${spring.jooq.with-includes}</includes>
            
                            <!-- schema version provider -->            
                            <schemaVersionProvider>${spring.jooq.with-schema-version-provider}</schemaVersionProvider>
            
                            <!-- All elements that are excluded from your schema
                            (A Java regular expression. Use the pipe to separate several expressions).
                            Excludes match before includes, i.e. excludes have a higher priority -->
                            <excludes>${spring.jooq.with-excludes}</excludes>                                                        
                        </database>
                        
                        <generate>
                            <daos>true</daos> <!-- daos will generate pojos as well -->
                            <!-- <pojos>true</pojos> --> <!-- this is needed to generated pojos without daos -->                             
                            <validationAnnotations>true</validationAnnotations>
                            <springAnnotations>true</springAnnotations>   
                        </generate>
                        
                        <!-- Rename the generated DAO classes -->                      
                        <strategy>
                            <matchers>
                                <tables>
                                    <table>
                                        <daoClass>
                                            <expression>$0_Repository</expression>
                                            <transform>PASCAL</transform>                                                                                      
                                        </daoClass>
                                    </table>
                                </tables>
                            </matchers>
                        </strategy>
                        
                        <!-- jOOQ will generate DAOs and POJOs in your behalf -->
                        <generate>
                            <daos>true</daos> 
                            <validationAnnotations>true</validationAnnotations>                            
                            <springAnnotations>true</springAnnotations>   
                        </generate>                        
                        
                        <target>
                            <!-- The destination package of your generated classes (within the destination directory) -->
                            <packageName>${spring.jooq.with-package-name}</packageName>
            
                            <!-- The destination directory of your generated classes. Using Maven directory layout here -->
                            <directory>${spring.jooq.with-directory}</directory>
                        </target>
                    </generator>    
                                                                                              
                    <!-- Instead of providing an inline configuration here, you can specify an external XML configuration file here -->
                    <!-- <configurationFile>file_path</configurationFile> -->
                    
                    <!-- A boolean property (or constant) can be specified here to tell the plugin not to do anything -->
                    <skip>false</skip>                                        
                </configuration>             
            </plugin>
        </plugins>
    </build>
</project>
