package com.classicmodels.repository;

import static com.classicmodels.converter.YearMonthConverter.YEARMONTH;
import com.classicmodels.pojo.ImmutableCustomer;
import com.classicmodels.pojo.ImmutableDepartment;
import com.classicmodels.pojo.ImmutableManager;
import com.classicmodels.pojo.ImmutableOffice;
import com.classicmodels.pojo.SimpleCustomer;
import com.classicmodels.pojo.SimpleDepartment;
import com.classicmodels.pojo.SimpleEmployee;
import com.classicmodels.pojo.SimpleManager;
import com.classicmodels.pojo.SimpleOffice;
import java.util.List;
import static jooq.generated.tables.Customer.CUSTOMER;
import static jooq.generated.tables.Department.DEPARTMENT;
import static jooq.generated.tables.Employee.EMPLOYEE;
import static jooq.generated.tables.Manager.MANAGER;
import static jooq.generated.tables.Office.OFFICE;
import org.jooq.DSLContext;
import static org.jooq.impl.DSL.concat;
import static org.jooq.impl.DSL.val;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import com.classicmodels.pojo.ICustomer;
import com.classicmodels.pojo.JpaCustomer;
import com.classicmodels.pojo.JpaDepartment;
import com.classicmodels.pojo.JpaManager;
import com.classicmodels.pojo.JpaOffice;
import com.classicmodels.pojo.RecordCustomer;
import com.classicmodels.pojo.RecordDepartment;
import com.classicmodels.pojo.RecordManager;
import com.classicmodels.pojo.RecordOffice;

@Repository
@Transactional(readOnly = true)
public class ClassicModelsRepository {

    private final DSLContext ctx;

    public ClassicModelsRepository(DSLContext ctx) {
        this.ctx = ctx;
    }

    // jOOQ generated POJOs almost like those from Example 1.3 via <pojos>true</pojos> 
    public void fetchSimplePojoExamples() {

        List<SimpleCustomer> result1 = ctx.select(
                CUSTOMER.CUSTOMER_NAME, CUSTOMER.FIRST_BUY_DATE.coerce(YEARMONTH).as("ym"))
                .from(CUSTOMER)
                .fetchInto(SimpleCustomer.class);        
        System.out.println("Example 1.1\n" + result1);
        
        // CUSTOMER.FIRST_BUY_DATE is ignored (it needs the proper alias), so POJOs's "ym"  field is set to null
        // CUSTOMER.PHONE is ignored
        List<SimpleCustomer> result2 = ctx.select(
                CUSTOMER.CUSTOMER_NAME, CUSTOMER.PHONE, CUSTOMER.FIRST_BUY_DATE.coerce(YEARMONTH))
                .from(CUSTOMER)
                .fetchInto(SimpleCustomer.class);        
        System.out.println("Example 1.2\n" + result2);
        
        // having a proper constructor, we can omit aliases
        List<SimpleDepartment> result3 = ctx.select(
                DEPARTMENT.NAME, DEPARTMENT.CODE, DEPARTMENT.TOPIC)
                .from(DEPARTMENT)
                .fetchInto(SimpleDepartment.class);
        System.out.println("Example 1.3\n" + result3);
        
        List<SimpleEmployee> result4 = ctx.select(EMPLOYEE.FIRST_NAME.as("fn"), EMPLOYEE.LAST_NAME.as("ln"),  
                concat(EMPLOYEE.employee().FIRST_NAME, val(" "), EMPLOYEE.employee().LAST_NAME).as("boss"))
                .from(EMPLOYEE)
                .fetchInto(SimpleEmployee.class);
        System.out.println("Example 1.4\n" + result4);  
                
        // fetch UDT
        List<SimpleManager> result5 = ctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)
                .from(MANAGER)
                .fetchInto(SimpleManager.class);
        System.out.println("Example 1.5\n" + result5);  
        
        // fetch embeddable
        List<SimpleOffice> result6 = ctx.select(OFFICE.OFFICE_CODE, OFFICE.OFFICE_FULL_ADDRESS)
                .from(OFFICE)
                .fetchInto(SimpleOffice.class);
        System.out.println("Example 1.6\n" + result6);                  
    }
    
    // This kind of POJOs are generated by jOOQ via <immutablePojos>true</immutablePojos> 
    // This will generate "immutable" POJOs for tables, UDTs, embeddable types, and so on
    public void fetchImmutablePojoExamples() {

        // require an exact match between the fetched fields and POJO's fields
        List<ImmutableCustomer> result1 = ctx.select(
                CUSTOMER.CUSTOMER_NAME, CUSTOMER.FIRST_BUY_DATE.coerce(YEARMONTH).as("ym"))
                .from(CUSTOMER)
                .fetchInto(ImmutableCustomer.class);        
        System.out.println("Example 2.1\n" + result1);         
        
        // DEPARTMENT.PHONE, DEPARTMENT.OFFICE_CODE - are ignored
        // since DEPARTMENT.CODE is not fetched the POJO's "code" field is set to null
        List<ImmutableDepartment> result2 = ctx.select(
                DEPARTMENT.NAME, DEPARTMENT.PHONE, DEPARTMENT.OFFICE_CODE, DEPARTMENT.TOPIC)
                .from(DEPARTMENT)
                .fetchInto(ImmutableDepartment.class);
        System.out.println("Example 2.2\n" + result2);
        
        // UDT
        List<ImmutableManager> result3 = ctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)
                .from(MANAGER)
                .fetchInto(ImmutableManager.class);
        System.out.println("Example 2.3\n" + result3);   
        
        // embeddable type
        List<ImmutableOffice> result4 = ctx.select(OFFICE.OFFICE_CODE, OFFICE.OFFICE_FULL_ADDRESS)
                .from(OFFICE)
                .fetchInto(ImmutableOffice.class);
        System.out.println("Example 2.4\n" + result4);           
    }
    
    // This kind of POJOs are generated by jOOQ via <jpaAnnotations>true</jpaAnnotations>
    public void fetchJpaLikePojoExamples() {

        List<JpaCustomer> result1 = ctx.select(
                CUSTOMER.CUSTOMER_NAME, CUSTOMER.FIRST_BUY_DATE.coerce(YEARMONTH))
                .from(CUSTOMER)
                .fetchInto(JpaCustomer.class);        
        System.out.println("Example 3.1\n" + result1);
               
        List<JpaDepartment> result2 = ctx.select(
                DEPARTMENT.NAME, DEPARTMENT.CODE, DEPARTMENT.TOPIC)
                .from(DEPARTMENT)
                .fetchInto(JpaDepartment.class);
        System.out.println("Example 3.2\n" + result2);
        
        // UDT
        List<JpaManager> result3 = ctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)
                .from(MANAGER)
                .fetchInto(JpaManager.class);
        System.out.println("Example 3.3\n" + result3); 
        
        // embeddable type
        List<JpaOffice> result4 = ctx.select(OFFICE.OFFICE_CODE, OFFICE.OFFICE_FULL_ADDRESS)
                .from(OFFICE)
                .fetchInto(JpaOffice.class);
        System.out.println("Example 3.4\n" + result4);        
    }
    
    // This kind of POJOs (JDK 14 records) are generated by jOOQ via <pojosAsJavaRecordClasses>true</pojosAsJavaRecordClasses>
    public void fetchJavaRecordPojoExamples() {
        
        List<RecordCustomer> result1 = ctx.select(
                CUSTOMER.CUSTOMER_NAME, CUSTOMER.FIRST_BUY_DATE.coerce(YEARMONTH))
                .from(CUSTOMER)
                .fetchInto(RecordCustomer.class);        
        System.out.println("Example 4.1\n" + result1);
        
        List<RecordDepartment> result2 = ctx.select(
                DEPARTMENT.NAME, DEPARTMENT.CODE, DEPARTMENT.TOPIC)
                .from(DEPARTMENT)
                .fetchInto(RecordDepartment.class);
        System.out.println("Example 4.2\n" + result2);
        
        // UDT
        List<RecordManager> result3 = ctx.select(MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)
                .from(MANAGER)
                .fetchInto(RecordManager.class);
        System.out.println("Example 4.3\n" + result3); 
        
        // embeddable type
        List<RecordOffice> result4 = ctx.select(OFFICE.OFFICE_CODE, OFFICE.OFFICE_FULL_ADDRESS)
                .from(OFFICE)
                .fetchInto(RecordOffice.class);
        System.out.println("Example 4.4\n" + result4);        
    }
    
    // This kind of interfaces are generated by jOOQ via <interfaces>true</interfaces>
    // If POJOs are generated as well then they will implement these interfaces.
    public void fetchProxyablePojoExamples() {                
        
        List<ICustomer> result1 = ctx.select(CUSTOMER.CUSTOMER_NAME)                
                .from(CUSTOMER)
                .fetchInto(ICustomer.class);
        System.out.println("Example 5.1\n" + result1);       
    }            
}